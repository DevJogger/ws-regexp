"use strict";
/**
 * Created by user on 2018/1/31/031.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const regexp_parser_event_1 = require("regexp-parser-event");
exports.ParserEventEmitter = regexp_parser_event_1.ParserEventEmitter;
const core_1 = require("./lib/core");
const regexp_helper_1 = require("regexp-helper");
exports.isRegExp = regexp_helper_1.isRegExp;
const RegexpHelper = require("regexp-helper");
const mergeOptions_1 = require("./lib/mergeOptions");
const getSource_1 = require("./lib/getSource");
exports.parseRegularExpressionString = getSource_1.parseRegularExpressionString;
/**
 * @deprecated
 */
exports.defaultOptions = {};
class zhRegExp extends RegExp {
    constructor(str, ...argv) {
        let { source, flags } = core_1.coreHandler(str, ...argv);
        super(source, flags);
    }
    /**
     * create a new zhRegExp class with default value
     * @example `zhRegExp.use(defaultOptions)`
     */
    static use(defaultOptions) {
        defaultOptions = mergeOptions_1.default({}, this[core_1.SymDefaults], defaultOptions);
        const zhRegExpNew = new Proxy(zhRegExp, {
            // @ts-ignore
            construct(target, argArray, newTarget) {
                let { str, flags, options, argv } = mergeOptions_1.getSettingOptions(...argArray);
                options = mergeOptions_1.default({}, defaultOptions, options);
                return new zhRegExp(str, flags, options, ...argv);
            },
            // @ts-ignore
            get(target, key) {
                if (key === core_1.SymDefaults) {
                    return defaultOptions;
                }
                return target[key];
            },
        });
        return zhRegExpNew;
    }
    static create(str, flags = null, skip, ...argv) {
        return new this(str, flags, skip, ...argv);
    }
    getStatic() {
        return Object.getPrototypeOf(this);
    }
    /**
     * @todo
     */
    toRegularExpressionString() {
        return this.toString();
        //return `/${this.source}/${this.flags}`;
    }
    static parseRegularExpressionString(str) {
        return getSource_1.parseRegularExpressionString(str);
    }
    static get support() {
        return require('regexp-support').default;
    }
    static get version() {
        return require('./package.json').version;
    }
}
exports.zhRegExp = zhRegExp;
(function (zhRegExp) {
    zhRegExp.isRegExp = RegexpHelper.isRegExp;
})(zhRegExp = exports.zhRegExp || (exports.zhRegExp = {}));
exports.create = zhRegExp.create.bind(zhRegExp);
Object.defineProperty(exports, "version", {
    get() {
        return require('./package.json').version;
    }
});
exports.default = zhRegExp;
//# sourceMappingURL=data:application/json;base64,