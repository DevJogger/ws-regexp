"use strict";
/**
 * Created by user on 2018/1/31/031.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const regexp_parser_event_1 = require("regexp-parser-event");
exports.ParserEventEmitter = regexp_parser_event_1.ParserEventEmitter;
const core_1 = require("./lib/core");
const regexp_helper_1 = require("regexp-helper");
exports.isRegExp = regexp_helper_1.isRegExp;
const index_1 = require("cjk-conv/lib/zh/table/index");
exports.IOptionsZhTable = index_1.IOptions;
const RegexpHelper = require("regexp-helper");
const mergeOptions_1 = require("./lib/mergeOptions");
const getSource_1 = require("./lib/getSource");
exports.parseRegularExpressionString = getSource_1.parseRegularExpressionString;
/**
 * @deprecated
 */
exports.defaultOptions = {};
class zhRegExp extends RegExp {
    constructor(str, ...argv) {
        let { source, flags } = core_1.coreHandler(str, ...argv);
        super(source, flags);
    }
    /**
     * create a new zhRegExp class with default value
     * @example `zhRegExp.use(defaultOptions)`
     */
    static use(defaultOptions) {
        defaultOptions = mergeOptions_1.default({}, this[core_1.SymDefaults], defaultOptions);
        const zhRegExpNew = new Proxy(zhRegExp, {
            // @ts-ignore
            construct(target, argArray, newTarget) {
                let { str, flags, options, argv } = mergeOptions_1.getSettingOptions(...argArray);
                options = mergeOptions_1.default({}, defaultOptions, options);
                return new zhRegExp(str, flags, options, ...argv);
            },
            // @ts-ignore
            get(target, key) {
                if (key === core_1.SymDefaults) {
                    return defaultOptions;
                }
                return target[key];
            },
        });
        return zhRegExpNew;
    }
    static create(str, flags = null, skip, ...argv) {
        return new this(str, flags, skip, ...argv);
    }
    getStatic() {
        return Object.getPrototypeOf(this);
    }
    /**
     * @todo
     */
    toRegularExpressionString() {
        return this.toString();
        //return `/${this.source}/${this.flags}`;
    }
    static parseRegularExpressionString(str) {
        return getSource_1.parseRegularExpressionString(str);
    }
    static get support() {
        return require('regexp-support').default;
    }
    static get version() {
        return require('./package.json').version;
    }
}
exports.zhRegExp = zhRegExp;
(function (zhRegExp) {
    zhRegExp.isRegExp = RegexpHelper.isRegExp;
})(zhRegExp = exports.zhRegExp || (exports.zhRegExp = {}));
exports.create = zhRegExp.create.bind(zhRegExp);
Object.defineProperty(exports, "version", {
    get() {
        return require('./package.json').version;
    }
});
exports.default = zhRegExp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBR0gsNkRBSzZCO0FBbUJLLDZCQXJCakMsd0NBQWtCLENBcUJpQztBQWpCcEQscUNBU29CO0FBQ3BCLGlEQUF5QztBQStKaEMsbUJBL0pBLHdCQUFRLENBK0pBO0FBOUpqQix1REFBMEU7QUFVakUsMEJBVlksZ0JBQWUsQ0FVWjtBQVJ4Qiw4Q0FBK0M7QUFDL0MscURBQXFFO0FBQ3JFLCtDQUErRDtBQTBKNUMsdUNBMUpWLHdDQUE0QixDQTBKVTtBQWxKL0M7O0dBRUc7QUFDVSxRQUFBLGNBQWMsR0FBYSxFQUFFLENBQUM7QUFFM0MsTUFBYSxRQUFTLFNBQVEsTUFBTTtJQTBGbkMsWUFBWSxHQUFHLEVBQUUsR0FBRyxJQUFJO1FBRXZCLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsa0JBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUVsRCxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUE1Q0Q7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUE2QjtRQUV2QyxjQUFjLEdBQUcsc0JBQVksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGtCQUFXLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUVyRSxNQUFNLFdBQVcsR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDdkMsYUFBYTtZQUNiLFNBQVMsQ0FBQyxNQUF1QixFQUFFLFFBQWlCLEVBQUUsU0FBZTtnQkFFcEUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLGdDQUFpQixDQUFDLEdBQUcsUUFBbUMsQ0FBQyxDQUFDO2dCQUU5RixPQUFPLEdBQUcsc0JBQVksQ0FBQyxFQUFFLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUVwRCxPQUFPLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUVELGFBQWE7WUFDYixHQUFHLENBQUMsTUFBc0IsRUFBRSxHQUF1QztnQkFFbEUsSUFBSSxHQUFHLEtBQUssa0JBQVcsRUFDdkI7b0JBQ0MsT0FBTyxjQUFjLENBQUE7aUJBQ3JCO2dCQUVELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLENBQUM7U0FFRCxDQUFDLENBQUM7UUFFSCxPQUFPLFdBQVcsQ0FBQTtJQUNuQixDQUFDO0lBZUQsTUFBTSxDQUFDLE1BQU0sQ0FBZSxHQUFHLEVBQUUsS0FBSyxHQUFHLElBQUksRUFBRSxJQUFLLEVBQUUsR0FBRyxJQUFJO1FBRTVELE9BQU8sSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsU0FBUztRQUVSLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCx5QkFBeUI7UUFFeEIsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkIseUNBQXlDO0lBQzFDLENBQUM7SUFFRCxNQUFNLENBQUMsNEJBQTRCLENBQUMsR0FBVztRQUU5QyxPQUFPLHdDQUE0QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxNQUFNLEtBQUssT0FBTztRQUVqQixPQUFPLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQWtELENBQUM7SUFDckYsQ0FBQztJQUVELE1BQU0sS0FBSyxPQUFPO1FBRWpCLE9BQU8sT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFBO0lBQ3pDLENBQUM7Q0FDRDtBQXBJRCw0QkFvSUM7QUFFRCxXQUFpQixRQUFRO0lBRVYsaUJBQVEsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO0FBQ2hELENBQUMsRUFIZ0IsUUFBUSxHQUFSLGdCQUFRLEtBQVIsZ0JBQVEsUUFHeEI7QUFFWSxRQUFBLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQTJCLENBQUM7QUFhL0UsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFO0lBQ3pDLEdBQUc7UUFFRixPQUFPLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtJQUN6QyxDQUFDO0NBQ0QsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8xLzMxLzAzMS5cbiAqL1xuXG5pbXBvcnQgeyBJQXN0VG9TdHJpbmdPcHRpb25zIH0gZnJvbSAncmVnZXhwLXBhcnNlci1saXRlcmFsJztcbmltcG9ydCB7XG5cdElOb2RlSW5wdXQsXG5cdElQYXJzZXJFdmVudEVtaXR0ZXJMaXN0ZW5lcixcblx0UGFyc2VyRXZlbnRFbWl0dGVyLFxuXHRQYXJzZXJFdmVudEVtaXR0ZXJFdmVudCxcbn0gZnJvbSAncmVnZXhwLXBhcnNlci1ldmVudCc7XG5pbXBvcnQgX3N1cHBvcnQgZnJvbSAncmVnZXhwLXN1cHBvcnQnO1xuaW1wb3J0IHtcblx0Y29yZUhhbmRsZXIsXG5cdElDb3JlSGFuZGxlclJldHVybixcblx0SU9wdGlvbnMsXG5cdElPcHRpb25zQ29yZSxcblx0SU9wdGlvbnNJbnB1dCxcblx0SU9wdGlvbnNPbixcblx0SU9wdGlvbnNSdW50aW1lLCBJUmVnRXhwVXNlcklucHV0LFxuXHRTeW1EZWZhdWx0cyxcbn0gZnJvbSAnLi9saWIvY29yZSc7XG5pbXBvcnQgeyBpc1JlZ0V4cCB9IGZyb20gJ3JlZ2V4cC1oZWxwZXInO1xuaW1wb3J0IHsgSU9wdGlvbnMgYXMgSU9wdGlvbnNaaFRhYmxlIH0gZnJvbSAnY2prLWNvbnYvbGliL3poL3RhYmxlL2luZGV4JztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gvbWVyZ2UnO1xuaW1wb3J0IFJlZ2V4cEhlbHBlciA9IHJlcXVpcmUoJ3JlZ2V4cC1oZWxwZXInKTtcbmltcG9ydCBtZXJnZU9wdGlvbnMsIHsgZ2V0U2V0dGluZ09wdGlvbnMgfSBmcm9tICcuL2xpYi9tZXJnZU9wdGlvbnMnO1xuaW1wb3J0IHsgcGFyc2VSZWd1bGFyRXhwcmVzc2lvblN0cmluZyB9IGZyb20gJy4vbGliL2dldFNvdXJjZSc7XG5cbmV4cG9ydCB7IFBhcnNlckV2ZW50RW1pdHRlckV2ZW50LCBQYXJzZXJFdmVudEVtaXR0ZXIsIElOb2RlSW5wdXQsIElQYXJzZXJFdmVudEVtaXR0ZXJMaXN0ZW5lciwgSUFzdFRvU3RyaW5nT3B0aW9ucyB9XG5cbmV4cG9ydCB7IElPcHRpb25zLCBJT3B0aW9uc1J1bnRpbWUsIElPcHRpb25zSW5wdXQsIElDb3JlSGFuZGxlclJldHVybiwgSU9wdGlvbnNPbiwgSU9wdGlvbnNDb3JlIH1cblxuZXhwb3J0IHsgSU9wdGlvbnNaaFRhYmxlIH1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdE9wdGlvbnM6IElPcHRpb25zID0ge307XG5cbmV4cG9ydCBjbGFzcyB6aFJlZ0V4cCBleHRlbmRzIFJlZ0V4cFxue1xuXHRwdWJsaWMgc291cmNlOiBzdHJpbmc7XG5cdHB1YmxpYyBmbGFnczogc3RyaW5nO1xuXG5cdHB1YmxpYyBkb3RBbGw6IGJvb2xlYW47XG5cblx0cHVibGljIGlnbm9yZUNhc2U6IGJvb2xlYW47XG5cdHB1YmxpYyBnbG9iYWw6IGJvb2xlYW47XG5cdHB1YmxpYyBtdWx0aWxpbmU6IGJvb2xlYW47XG5cdHB1YmxpYyBzdGlja3k6IGJvb2xlYW47XG5cdHB1YmxpYyB1bmljb2RlOiBib29sZWFuO1xuXG5cdHB1YmxpYyBsYXN0SW5kZXg6IG51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIG5vbi1zdGFuZGFyZCBsZWZ0Q29udGV4dCBwcm9wZXJ0eSBpcyBhIHN0YXRpYyBhbmQgcmVhZC1vbmx5IHByb3BlcnR5IG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdCBjb250YWlucyB0aGUgc3Vic3RyaW5nIHByZWNlZGluZyB0aGUgbW9zdCByZWNlbnQgbWF0Y2guIFJlZ0V4cC4kYCBpcyBhbiBhbGlhcyBmb3IgdGhpcyBwcm9wZXJ0eS5cblx0ICpcblx0ICogQGFsaWFzICRgXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGxlZnRDb250ZXh0OiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBUaGUgbm9uLXN0YW5kYXJkIHJpZ2h0Q29udGV4dCBwcm9wZXJ0eSBpcyBhIHN0YXRpYyBhbmQgcmVhZC1vbmx5IHByb3BlcnR5IG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdCBjb250YWlucyB0aGUgc3Vic3RyaW5nIGZvbGxvd2luZyB0aGUgbW9zdCByZWNlbnQgbWF0Y2guIFJlZ0V4cC4kJyBpcyBhbiBhbGlhcyBmb3IgdGhpcyBwcm9wZXJ0eS5cblx0ICpcblx0ICogQGFsaWFzICQnXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHJpZ2h0Q29udGV4dDogc3RyaW5nO1xuXHQvKipcblx0ICogVGhlIG5vbi1zdGFuZGFyZCBsYXN0UGFyZW4gcHJvcGVydHkgaXMgYSBzdGF0aWMgYW5kIHJlYWQtb25seSBwcm9wZXJ0eSBvZiByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgY29udGFpbnMgdGhlIGxhc3QgcGFyZW50aGVzaXplZCBzdWJzdHJpbmcgbWF0Y2gsIGlmIGFueS4gUmVnRXhwLiQrIGlzIGFuIGFsaWFzIGZvciB0aGlzIHByb3BlcnR5LlxuXHQgKlxuXHQgKiBAYWxpYXMgJCtcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgbGFzdFBhcmVuOiBzdHJpbmc7XG5cdC8qKlxuXHQgKiBUaGUgbm9uLXN0YW5kYXJkIGxhc3RNYXRjaCBwcm9wZXJ0eSBpcyBhIHN0YXRpYyBhbmQgcmVhZC1vbmx5IHByb3BlcnR5IG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMgdGhhdCBjb250YWlucyB0aGUgbGFzdCBtYXRjaGVkIGNoYXJhY3RlcnMuIFJlZ0V4cC4kJiBpcyBhbiBhbGlhcyBmb3IgdGhpcyBwcm9wZXJ0eS5cblx0ICpcblx0ICogQGFsaWFzICQmXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGxhc3RNYXRjaDogc3RyaW5nO1xuXHQvKipcblx0ICogVGhlIG5vbi1zdGFuZGFyZCBpbnB1dCBwcm9wZXJ0eSBpcyBhIHN0YXRpYyBwcm9wZXJ0eSBvZiByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgY29udGFpbnMgdGhlIHN0cmluZyBhZ2FpbnN0IHdoaWNoIGEgcmVndWxhciBleHByZXNzaW9uIGlzIG1hdGNoZWQuIFJlZ0V4cC4kXyBpcyBhbiBhbGlhcyBmb3IgdGhpcyBwcm9wZXJ0eS5cblx0ICpcblx0ICogQGFsaWFzICRfXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGlucHV0OiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIGRlZmF1bHQgdmFsdWUgb25seSBleGlzdHMgYW5kIHdvcmsgd2hlbiB1c2UgYHpoUmVnRXhwLnVzZShkZWZhdWx0T3B0aW9ucylgXG5cdCAqL1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFtTeW1EZWZhdWx0c106IElPcHRpb25zSW5wdXQ7XG5cblx0LyoqXG5cdCAqIGNyZWF0ZSBhIG5ldyB6aFJlZ0V4cCBjbGFzcyB3aXRoIGRlZmF1bHQgdmFsdWVcblx0ICogQGV4YW1wbGUgYHpoUmVnRXhwLnVzZShkZWZhdWx0T3B0aW9ucylgXG5cdCAqL1xuXHRzdGF0aWMgdXNlKGRlZmF1bHRPcHRpb25zOiBJT3B0aW9uc0lucHV0KTogdHlwZW9mIHpoUmVnRXhwXG5cdHtcblx0XHRkZWZhdWx0T3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh7fSwgdGhpc1tTeW1EZWZhdWx0c10sIGRlZmF1bHRPcHRpb25zKTtcblxuXHRcdGNvbnN0IHpoUmVnRXhwTmV3ID0gbmV3IFByb3h5KHpoUmVnRXhwLCB7XG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRjb25zdHJ1Y3QodGFyZ2V0OiB0eXBlb2YgemhSZWdFeHAsIGFyZ0FycmF5OiB1bmtub3duLCBuZXdUYXJnZXQ/OiBhbnkpXG5cdFx0XHR7XG5cdFx0XHRcdGxldCB7IHN0ciwgZmxhZ3MsIG9wdGlvbnMsIGFyZ3YgfSA9IGdldFNldHRpbmdPcHRpb25zKC4uLmFyZ0FycmF5IGFzIFtJUmVnRXhwVXNlcklucHV0LCBhbnldKTtcblxuXHRcdFx0XHRvcHRpb25zID0gbWVyZ2VPcHRpb25zKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cblx0XHRcdFx0cmV0dXJuIG5ldyB6aFJlZ0V4cChzdHIsIGZsYWdzLCBvcHRpb25zLCAuLi5hcmd2KTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGdldCh0YXJnZXQ6IGtleW9mIHpoUmVnRXhwLCBrZXk6IGtleW9mIHpoUmVnRXhwIHx0eXBlb2YgU3ltRGVmYXVsdHMpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChrZXkgPT09IFN5bURlZmF1bHRzKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIGRlZmF1bHRPcHRpb25zXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdGFyZ2V0W2tleV07XG5cdFx0XHR9LFxuXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gemhSZWdFeHBOZXdcblx0fVxuXG5cdGNvbnN0cnVjdG9yKHN0cjogSVJlZ0V4cFVzZXJJbnB1dCwgb3B0aW9ucz86IElPcHRpb25zSW5wdXQsIC4uLmFyZ3YpXG5cdGNvbnN0cnVjdG9yKHN0cjogSVJlZ0V4cFVzZXJJbnB1dCwgZmxhZ3M/OiBzdHJpbmcsIG9wdGlvbnM/OiBJT3B0aW9uc0lucHV0LCAuLi5hcmd2KVxuXHRjb25zdHJ1Y3RvcihzdHI6IElSZWdFeHBVc2VySW5wdXQsIGZsYWdzOiBzdHJpbmcsIHNraXA6IHN0cmluZywgLi4uYXJndilcblx0Y29uc3RydWN0b3Ioc3RyOiBJUmVnRXhwVXNlcklucHV0LCBmbGFnczogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnNJbnB1dCB8IHN0cmluZywgLi4uYXJndilcblx0Y29uc3RydWN0b3Ioc3RyLCAuLi5hcmd2KVxuXHR7XG5cdFx0bGV0IHsgc291cmNlLCBmbGFncyB9ID0gY29yZUhhbmRsZXIoc3RyLCAuLi5hcmd2KTtcblxuXHRcdHN1cGVyKHNvdXJjZSwgZmxhZ3MpO1xuXHR9XG5cblx0c3RhdGljIGNyZWF0ZTxUID0gemhSZWdFeHA+KHN0cjogSVJlZ0V4cFVzZXJJbnB1dCwgZmxhZ3M/OiBzdHJpbmcsIG9wdGlvbnM/OiBJT3B0aW9uc0lucHV0IHwgc3RyaW5nKTogVFxuXHRzdGF0aWMgY3JlYXRlPFQgPSB6aFJlZ0V4cD4oc3RyOiBJUmVnRXhwVXNlcklucHV0LCBvcHRpb25zPzogSU9wdGlvbnNJbnB1dCk6IFRcblx0c3RhdGljIGNyZWF0ZTxUID0gemhSZWdFeHA+KHN0ciwgZmxhZ3MgPSBudWxsLCBza2lwPywgLi4uYXJndilcblx0e1xuXHRcdHJldHVybiBuZXcgdGhpcyhzdHIsIGZsYWdzLCBza2lwLCAuLi5hcmd2KTtcblx0fVxuXG5cdGdldFN0YXRpYzxUID0gdHlwZW9mIHpoUmVnRXhwPigpOiBUXG5cdHtcblx0XHRyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEB0b2RvXG5cdCAqL1xuXHR0b1JlZ3VsYXJFeHByZXNzaW9uU3RyaW5nKClcblx0e1xuXHRcdHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG5cdFx0Ly9yZXR1cm4gYC8ke3RoaXMuc291cmNlfS8ke3RoaXMuZmxhZ3N9YDtcblx0fVxuXG5cdHN0YXRpYyBwYXJzZVJlZ3VsYXJFeHByZXNzaW9uU3RyaW5nKHN0cjogc3RyaW5nKVxuXHR7XG5cdFx0cmV0dXJuIHBhcnNlUmVndWxhckV4cHJlc3Npb25TdHJpbmcoc3RyKTtcblx0fVxuXG5cdHN0YXRpYyBnZXQgc3VwcG9ydCgpXG5cdHtcblx0XHRyZXR1cm4gcmVxdWlyZSgncmVnZXhwLXN1cHBvcnQnKS5kZWZhdWx0IGFzIHR5cGVvZiBpbXBvcnQoJ3JlZ2V4cC1zdXBwb3J0JykuZGVmYXVsdDtcblx0fVxuXG5cdHN0YXRpYyBnZXQgdmVyc2lvbigpOiBzdHJpbmdcblx0e1xuXHRcdHJldHVybiByZXF1aXJlKCcuL3BhY2thZ2UuanNvbicpLnZlcnNpb25cblx0fVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIHpoUmVnRXhwXG57XG5cdGV4cG9ydCBpbXBvcnQgaXNSZWdFeHAgPSBSZWdleHBIZWxwZXIuaXNSZWdFeHA7XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSB6aFJlZ0V4cC5jcmVhdGUuYmluZCh6aFJlZ0V4cCkgYXMgdHlwZW9mIHpoUmVnRXhwLmNyZWF0ZTtcblxuZXhwb3J0IHsgaXNSZWdFeHAsIHBhcnNlUmVndWxhckV4cHJlc3Npb25TdHJpbmcgfVxuXG5leHBvcnQgaW50ZXJmYWNlIElBcGk8VCA9IHpoUmVnRXhwPlxue1xuXHQoc3RyOiBzdHJpbmcgfCBSZWdFeHAsIGZsYWdzPzogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnMgfCBzdHJpbmcpOiBULFxuXHQoc3RyOiBzdHJpbmcgfCBSZWdFeHAsIG9wdGlvbnM/OiBJT3B0aW9ucyk6IFQsXG59XG5cbi8vIEB0cy1pZ25vcmVcbmV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInZlcnNpb25cIiwge1xuXHRnZXQoKVxuXHR7XG5cdFx0cmV0dXJuIHJlcXVpcmUoJy4vcGFja2FnZS5qc29uJykudmVyc2lvblxuXHR9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgemhSZWdFeHA7XG4iXX0=