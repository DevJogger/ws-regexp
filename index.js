"use strict";
const _cloneRegexp = require("clone-regexp");
function execAll(inputRegExp, input, options) {
    let match;
    options = options || {};
    const { resetLastIndex = true, cloneRegexp = _cloneRegexp, removeHiddenData } = options;
    const matches = [];
    const re = cloneRegexp(inputRegExp);
    const isGlobal = re.global;
    if (resetLastIndex) {
        re.lastIndex = 0;
    }
    let lastIndex = 0;
    let { rightContext, leftContext } = options;
    rightContext = !!rightContext;
    leftContext = !!leftContext;
    // @ts-ignore
    while (match = re.exec(input)) {
        delete match.input;
        matches.push(Object.assign(match, {
            match: match[0],
            sub: match.slice(1),
            // @ts-ignore
            leftContext: leftContext && RegExp.leftContext,
            // @ts-ignore
            rightContext: rightContext && RegExp.rightContext,
            [SYMBOL]: removeHiddenData ? null : matches,
        }));
        lastIndex = re.lastIndex;
        if (!isGlobal) {
            break;
        }
    }
    if (!removeHiddenData) {
        Object.defineProperties(matches, {
            re: {
                value: re,
                enumerable: false,
                configurable: false,
                writable: false,
            },
            input: {
                value: input,
                enumerable: false,
                configurable: false,
                writable: false,
            },
            lastIndex: {
                value: lastIndex,
                enumerable: false,
                configurable: false,
                writable: false,
            },
        });
    }
    return matches;
}
const _execAll = execAll;
(function (execAll) {
    // @ts-ignore
    function execall(...argv) {
        // @ts-ignore
        return _execAll(...argv);
    }
    execAll.execall = execall;
    execAll.SYMBOL = Symbol.for('execall');
})(execAll || (execAll = {}));
var SYMBOL = execAll.SYMBOL;
execAll.default = execAll;
// @ts-ignore
execAll.execall = execAll;
Object.defineProperty(execAll, "__esModule", { value: true });
module.exports = execAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkNBQThDO0FBRTlDLFNBQVMsT0FBTyxDQUE0QixXQUF1QixFQUNsRSxLQUFhLEVBQ2IsT0FBNEI7SUFHNUIsSUFBSSxLQUFpQyxDQUFDO0lBQ3RDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBRXhCLE1BQU0sRUFBRSxjQUFjLEdBQUcsSUFBSSxFQUFFLFdBQVcsR0FBRyxZQUErQixFQUFFLGdCQUFnQixFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRTNHLE1BQU0sT0FBTyxHQUFHLEVBQWlCLENBQUM7SUFFbEMsTUFBTSxFQUFFLEdBQUksV0FBK0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RCxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDO0lBRTNCLElBQUksY0FBYyxFQUNsQjtRQUNDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBRWxCLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBRTVDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQzlCLFdBQVcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRTVCLGFBQWE7SUFDYixPQUFPLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUM3QjtRQUNDLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQztRQUVuQixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2pDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2YsR0FBRyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRW5CLGFBQWE7WUFDYixXQUFXLEVBQUUsV0FBVyxJQUFJLE1BQU0sQ0FBQyxXQUFXO1lBQzlDLGFBQWE7WUFDYixZQUFZLEVBQUUsWUFBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZO1lBRWpELENBQUMsTUFBTSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTztTQUMzQyxDQUFDLENBQUMsQ0FBQztRQUVKLFNBQVMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDO1FBRXpCLElBQUksQ0FBQyxRQUFRLEVBQ2I7WUFDQyxNQUFNO1NBQ047S0FDRDtJQUVELElBQUksQ0FBQyxnQkFBZ0IsRUFDckI7UUFDQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFO1lBQ2hDLEVBQUUsRUFBRTtnQkFDSCxLQUFLLEVBQUUsRUFBRTtnQkFDVCxVQUFVLEVBQUUsS0FBSztnQkFDakIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFFBQVEsRUFBRSxLQUFLO2FBQ2Y7WUFFRCxLQUFLLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLEtBQUs7Z0JBQ1osVUFBVSxFQUFFLEtBQUs7Z0JBQ2pCLFlBQVksRUFBRSxLQUFLO2dCQUNuQixRQUFRLEVBQUUsS0FBSzthQUNmO1lBRUQsU0FBUyxFQUFFO2dCQUNWLEtBQUssRUFBRSxTQUFTO2dCQUNoQixVQUFVLEVBQUUsS0FBSztnQkFDakIsWUFBWSxFQUFFLEtBQUs7Z0JBQ25CLFFBQVEsRUFBRSxLQUFLO2FBQ2Y7U0FDRCxDQUFDLENBQUM7S0FDSDtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUM7QUFPekIsV0FBVSxPQUFPO0lBTWhCLGFBQWE7SUFDYixTQUFnQixPQUFPLENBQUMsR0FBRyxJQUFJO1FBRTlCLGFBQWE7UUFDYixPQUFPLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFBO0lBQ3pCLENBQUM7SUFKZSxlQUFPLFVBSXRCLENBQUE7SUFzRVksY0FBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0MsQ0FBQyxFQWxGUyxPQUFPLEtBQVAsT0FBTyxRQWtGaEI7QUFFRCxJQUFPLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRS9CLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQzFCLGFBQWE7QUFDYixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUUxQixNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxZQUFZLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUU5RCxpQkFBUyxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2Nsb25lUmVnZXhwID0gcmVxdWlyZSgnY2xvbmUtcmVnZXhwJyk7XG5cbmZ1bmN0aW9uIGV4ZWNBbGw8VCBleHRlbmRzIFJlZ0V4cCA9IFJlZ0V4cD4oaW5wdXRSZWdFeHA6IFQgfCBSZWdFeHAsXG5cdGlucHV0OiBzdHJpbmcsXG5cdG9wdGlvbnM/OiBJRXhlY0FsbE9wdGlvbnM8VD4sXG4pOiBJTWF0Y2hlczxUPlxue1xuXHRsZXQgbWF0Y2g6IElFeGVjQWxsUmVnRXhwRXhlY0FycmF5PFQ+O1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRjb25zdCB7IHJlc2V0TGFzdEluZGV4ID0gdHJ1ZSwgY2xvbmVSZWdleHAgPSBfY2xvbmVSZWdleHAgYXMgSUNsb25lUmVnZXhwPFQ+LCByZW1vdmVIaWRkZW5EYXRhIH0gPSBvcHRpb25zO1xuXG5cdGNvbnN0IG1hdGNoZXMgPSBbXSBhcyBJTWF0Y2hlczxUPjtcblxuXHRjb25zdCByZSA9IChjbG9uZVJlZ2V4cCBhcyBJQ2xvbmVSZWdleHA8VD4pKGlucHV0UmVnRXhwKTtcblx0Y29uc3QgaXNHbG9iYWwgPSByZS5nbG9iYWw7XG5cblx0aWYgKHJlc2V0TGFzdEluZGV4KVxuXHR7XG5cdFx0cmUubGFzdEluZGV4ID0gMDtcblx0fVxuXG5cdGxldCBsYXN0SW5kZXggPSAwO1xuXG5cdGxldCB7IHJpZ2h0Q29udGV4dCwgbGVmdENvbnRleHQgfSA9IG9wdGlvbnM7XG5cblx0cmlnaHRDb250ZXh0ID0gISFyaWdodENvbnRleHQ7XG5cdGxlZnRDb250ZXh0ID0gISFsZWZ0Q29udGV4dDtcblxuXHQvLyBAdHMtaWdub3JlXG5cdHdoaWxlIChtYXRjaCA9IHJlLmV4ZWMoaW5wdXQpKVxuXHR7XG5cdFx0ZGVsZXRlIG1hdGNoLmlucHV0O1xuXG5cdFx0bWF0Y2hlcy5wdXNoKE9iamVjdC5hc3NpZ24obWF0Y2gsIHtcblx0XHRcdG1hdGNoOiBtYXRjaFswXSxcblx0XHRcdHN1YjogbWF0Y2guc2xpY2UoMSksXG5cblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGxlZnRDb250ZXh0OiBsZWZ0Q29udGV4dCAmJiBSZWdFeHAubGVmdENvbnRleHQsXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRyaWdodENvbnRleHQ6IHJpZ2h0Q29udGV4dCAmJiBSZWdFeHAucmlnaHRDb250ZXh0LFxuXG5cdFx0XHRbU1lNQk9MXTogcmVtb3ZlSGlkZGVuRGF0YSA/IG51bGwgOiBtYXRjaGVzLFxuXHRcdH0pKTtcblxuXHRcdGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuXHRcdGlmICghaXNHbG9iYWwpXG5cdFx0e1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCFyZW1vdmVIaWRkZW5EYXRhKVxuXHR7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMobWF0Y2hlcywge1xuXHRcdFx0cmU6IHtcblx0XHRcdFx0dmFsdWU6IHJlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0fSxcblxuXHRcdFx0aW5wdXQ6IHtcblx0XHRcdFx0dmFsdWU6IGlucHV0LFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0d3JpdGFibGU6IGZhbHNlLFxuXHRcdFx0fSxcblxuXHRcdFx0bGFzdEluZGV4OiB7XG5cdFx0XHRcdHZhbHVlOiBsYXN0SW5kZXgsXG5cdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIG1hdGNoZXM7XG59XG5cbmNvbnN0IF9leGVjQWxsID0gZXhlY0FsbDtcblxuaW1wb3J0IElFeGVjQWxsT3B0aW9ucyA9IGV4ZWNBbGwuSUV4ZWNBbGxPcHRpb25zO1xuaW1wb3J0IElNYXRjaGVzID0gZXhlY0FsbC5JTWF0Y2hlcztcbmltcG9ydCBJRXhlY0FsbFJlZ0V4cEV4ZWNBcnJheSA9IGV4ZWNBbGwuSUV4ZWNBbGxSZWdFeHBFeGVjQXJyYXk7XG5pbXBvcnQgSUNsb25lUmVnZXhwID0gZXhlY0FsbC5JQ2xvbmVSZWdleHA7XG5cbm5hbWVzcGFjZSBleGVjQWxsXG57XG5cdGV4cG9ydCBmdW5jdGlvbiBleGVjYWxsPFQgZXh0ZW5kcyBSZWdFeHAgPSBSZWdFeHA+KGlucHV0UmVnRXhwOiBUIHwgUmVnRXhwLFxuXHRcdGlucHV0OiBzdHJpbmcsXG5cdFx0b3B0aW9ucz86IElFeGVjQWxsT3B0aW9uczxUPixcblx0KTogSU1hdGNoZXM8VD5cblx0Ly8gQHRzLWlnbm9yZVxuXHRleHBvcnQgZnVuY3Rpb24gZXhlY2FsbCguLi5hcmd2KVxuXHR7XG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdHJldHVybiBfZXhlY0FsbCguLi5hcmd2KVxuXHR9XG5cblx0ZXhwb3J0IGludGVyZmFjZSBJRXhlY0FsbE9wdGlvbnM8VCBleHRlbmRzIFJlZ0V4cCA9IFJlZ0V4cD5cblx0e1xuXHRcdHJlc2V0TGFzdEluZGV4PzogYm9vbGVhbixcblx0XHQvKipcblx0XHQgKiBhbGxvdyBjaGFuZ2UgY2xvbmVSZWdleHAgZnVuY3Rpb25cblx0XHQgKi9cblx0XHRjbG9uZVJlZ2V4cD86IElDbG9uZVJlZ2V4cDxUPixcblxuXHRcdC8qKlxuXHRcdCAqIG9ubHkgdXNlIHRoaXMgd2hlbiB1IGtub3cgd2hhdCB1IGRvaW5nXG5cdFx0ICovXG5cdFx0bGVmdENvbnRleHQ/OiBib29sZWFuLFxuXHRcdHJpZ2h0Q29udGV4dD86IGJvb2xlYW4sXG5cblx0XHRyZW1vdmVIaWRkZW5EYXRhPzogYm9vbGVhbixcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSUNsb25lUmVnZXhwPFQgZXh0ZW5kcyBSZWdFeHAgPSBSZWdFeHA+XG5cdHtcblx0XHQoaW5wdXRSZWdFeHA6IFQgfCBSZWdFeHAsIC4uLmFyZ3YpOiBUXG5cdH1cblxuXHRleHBvcnQgdHlwZSBJRXhlY0FsbFJlZ0V4cEV4ZWNBcnJheTxUIGV4dGVuZHMgUmVnRXhwID0gUmVnRXhwPiA9IFJlZ0V4cEV4ZWNBcnJheSAmIHN0cmluZ1tdICYge1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIDAtYmFzZWQgaW5kZXggb2YgdGhlIG1hdGNoIGluIHRoZSBzdHJpbmcuXG5cdFx0ICovXG5cdFx0aW5kZXg6IG51bWJlcixcblx0XHQvL2lucHV0OiBzdHJpbmcsXG5cblx0XHQvKipcblx0XHQgKiBlczIwMThcblx0XHQgKi9cblx0XHRncm91cHM/OiB7XG5cdFx0XHRbazogc3RyaW5nXTogc3RyaW5nLFxuXHRcdH0sXG5cblx0XHQvL1tTXTogSU1hdGNoZXM8VD5cblx0fTtcblxuXHRleHBvcnQgdHlwZSBJTWF0Y2hlczxUIGV4dGVuZHMgUmVnRXhwID0gUmVnRXhwPiA9IChJRXhlY0FsbFJlZ0V4cEV4ZWNBcnJheTxUPiAmIHtcblx0XHRtYXRjaDogc3RyaW5nLFxuXHRcdHN1Yjogc3RyaW5nW10sXG5cblx0XHRsZWZ0Q29udGV4dD86IHN0cmluZyxcblx0XHRyaWdodENvbnRleHQ/OiBzdHJpbmcsXG5cblx0fSlbXSAmIHtcblx0XHQvKipcblx0XHQgKiByZWd1bGFyIGV4cHJlc3Npb25zXG5cdFx0ICpcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHRyZWFkb25seSByZTogVCxcblx0XHQvKipcblx0XHQgKiByZWd1bGFyIGV4cHJlc3Npb25zIHRoYXQgY29udGFpbnMgdGhlIHN0cmluZyBhZ2FpbnN0IHdoaWNoIGEgcmVndWxhciBleHByZXNzaW9uIGlzIG1hdGNoZWQuXG5cdFx0ICpcblx0XHQgKiBAcmVhZG9ubHlcblx0XHQgKi9cblx0XHRyZWFkb25seSBpbnB1dDogc3RyaW5nLFxuXHRcdC8qKlxuXHRcdCAqIGxhc3QgbWF0Y2hlZCBpbmRleFxuXHRcdCAqXG5cdFx0ICogQHJlYWRvbmx5XG5cdFx0ICovXG5cdFx0cmVhZG9ubHkgbGFzdEluZGV4OiBudW1iZXIsXG5cdH07XG5cblx0ZXhwb3J0IGNvbnN0IFNZTUJPTCA9IFN5bWJvbC5mb3IoJ2V4ZWNhbGwnKTtcbn1cblxuaW1wb3J0IFNZTUJPTCA9IGV4ZWNBbGwuU1lNQk9MO1xuXG5leGVjQWxsLmRlZmF1bHQgPSBleGVjQWxsO1xuLy8gQHRzLWlnbm9yZVxuZXhlY0FsbC5leGVjYWxsID0gZXhlY0FsbDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4ZWNBbGwsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG5leHBvcnQgPSBleGVjQWxsO1xuIl19