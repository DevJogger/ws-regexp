"use strict";
/// <reference lib="es2018.regexp" />
const _cloneRegexp = require("clone-regexp");
function execAll(inputRegExp, input, options) {
    let match;
    options = options || {};
    const { resetLastIndex = true, cloneRegexp = _cloneRegexp, removeHiddenData } = options;
    const matches = [];
    const re = cloneRegexp(inputRegExp);
    const isGlobal = re.global;
    if (resetLastIndex) {
        re.lastIndex = 0;
    }
    let lastIndex = 0;
    let { rightContext, leftContext } = options;
    rightContext = !!rightContext;
    leftContext = !!leftContext;
    while (match = re.exec(input)) {
        delete match.input;
        matches.push(Object.assign(match, {
            match: match[0],
            sub: match.slice(1),
            // @ts-ignore
            leftContext: leftContext && RegExp.leftContext,
            // @ts-ignore
            rightContext: rightContext && RegExp.rightContext,
            [SYMBOL]: removeHiddenData ? null : matches,
        }));
        lastIndex = re.lastIndex;
        if (!isGlobal) {
            break;
        }
    }
    if (!removeHiddenData) {
        Object.defineProperties(matches, {
            re: {
                value: re,
                enumerable: false,
                configurable: false,
                writable: false,
            },
            input: {
                value: input,
                enumerable: false,
                configurable: false,
                writable: false,
            },
            lastIndex: {
                value: lastIndex,
                enumerable: false,
                configurable: false,
                writable: false,
            },
        });
    }
    return matches;
}
const _execAll = execAll;
(function (execAll) {
    execAll.SYMBOL = Symbol.for('execall');
    // @ts-ignore
    function execall(...argv) {
        // @ts-ignore
        return _execAll(...argv);
    }
    execAll.execall = execall;
})(execAll || (execAll = {}));
var SYMBOL = execAll.SYMBOL;
execAll.default = execAll;
// @ts-ignore
execAll.execall = execAll;
Object.defineProperty(execAll, "__esModule", { value: true });
module.exports = execAll;
//# sourceMappingURL=data:application/json;base64,