"use strict";
/**
 * Created by user on 2018/1/31/031.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const regexp_parser_event_1 = require("regexp-parser-event");
exports.ParserEventEmitter = regexp_parser_event_1.ParserEventEmitter;
const regexp_support_1 = require("regexp-support");
const core_1 = require("./lib/core");
exports.parseRegularExpressionString = core_1.parseRegularExpressionString;
const RegexpHelper = require("regexp-helper");
const regexp_helper_1 = require("regexp-helper");
exports.isRegExp = regexp_helper_1.isRegExp;
/**
 * @deprecated
 */
exports.defaultOptions = {};
class zhRegExp extends RegExp {
    constructor(str, _flags = null, options = {}, ...argv) {
        let { source, flags } = core_1.coreHandler(str, _flags, options, ...argv);
        super(source, flags);
    }
    static create(str, flags = null, skip, ...argv) {
        return new this(str, flags, skip, ...argv);
    }
    getStatic() {
        return Object.getPrototypeOf(this);
    }
    /**
     * @todo
     */
    toRegularExpressionString() {
        return this.toString();
        //return `/${this.source}/${this.flags}`;
    }
    static parseRegularExpressionString(str) {
        return core_1.parseRegularExpressionString(str);
    }
    static get support() {
        return regexp_support_1.default;
    }
    static get version() {
        return require('./package.json').version;
    }
}
exports.zhRegExp = zhRegExp;
(function (zhRegExp) {
    zhRegExp.isRegExp = RegexpHelper.isRegExp;
})(zhRegExp = exports.zhRegExp || (exports.zhRegExp = {}));
exports.create = zhRegExp.create.bind(zhRegExp);
Object.defineProperty(exports, "version", {
    get() {
        return require('./package.json').version;
    }
});
exports.default = zhRegExp;
//# sourceMappingURL=data:application/json;base64,