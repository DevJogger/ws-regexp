/**
 * Created by user on 2018/5/6/006.
 */
import { ICreateRegExp, ITypeCreateRegExp } from '../../index';
import { IPatternTestRow } from '../../pattern';
export declare const KEY_PREFIX = "\\p{";
export declare const KEY_PREFIX_NEGATION = "\\P{";
export declare const KEY_SUFFIX = "}";
/**
 * @link http://2ality.com/2017/07/regexp-unicode-property-escapes.html
 * @link https://en.wikipedia.org/wiki/Unicode_character_property
 * @link http://www.wellho.net/regex/javare.html
 * @link https://zhuanlan.zhihu.com/p/33335629
 * @link https://github.com/Icemic/huozi.js/blob/master/lib/isCJK.js
 * @link https://github.com/ethantw/Han/blob/master/src/js/regex/unicode.js
 */
export declare const UNICODE: {
    White_Space: boolean;
    Letter: boolean;
    Lower: boolean;
    Upper: boolean;
    Alpha: boolean;
    Digit: boolean;
    Alnum: boolean;
    Punct: boolean;
    Graph: boolean;
    Blank: boolean;
    Cntrl: boolean;
    XDigit: boolean;
    Space: boolean;
    Decimal_Digit_Number: boolean;
    Ideographic: boolean;
    Unified_Ideograph: boolean;
};
export declare const UNICODE_ALL: {
    White_Space: boolean;
    Letter: boolean;
    Lower: boolean;
    Upper: boolean;
    Alpha: boolean;
    Digit: boolean;
    Alnum: boolean;
    Punct: boolean;
    Graph: boolean;
    Blank: boolean;
    Cntrl: boolean;
    XDigit: boolean;
    Space: boolean;
    Decimal_Digit_Number: boolean;
    Ideographic: boolean;
    Unified_Ideograph: boolean;
    "ASCII": boolean;
    "Alphabetic": boolean;
    "Any": boolean;
    "Default_Ignorable_Code_Point": boolean;
    "Lowercase": boolean;
    "Noncharacter_Code_Point": boolean;
    "Uppercase": boolean;
    "C": boolean;
    "Other": boolean;
    "Cc": boolean;
    "Control": boolean;
    "Cf": boolean;
    "Format": boolean;
    "Cn": boolean;
    "Unassigned": boolean;
    "Co": boolean;
    "Private_Use": boolean;
    "Cs": boolean;
    "Surrogate": boolean;
    "L": boolean;
    "LC": boolean;
    "Cased_Letter": boolean;
    "Ll": boolean;
    "Lowercase_Letter": boolean;
    "Lm": boolean;
    "Modifier_Letter": boolean;
    "Lo": boolean;
    "Other_Letter": boolean;
    "Lt": boolean;
    "Titlecase_Letter": boolean;
    "Lu": boolean;
    "Uppercase_Letter": boolean;
    "M": boolean;
    "Mark": boolean;
    "Mc": boolean;
    "Spacing_Mark": boolean;
    "Me": boolean;
    "Enclosing_Mark": boolean;
    "Mn": boolean;
    "Nonspacing_Mark": boolean;
    "N": boolean;
    "Number": boolean;
    "Nd": boolean;
    "Decimal_Number": boolean;
    "Nl": boolean;
    "Letter_Number": boolean;
    "No": boolean;
    "Other_Number": boolean;
    "P": boolean;
    "Punctuation": boolean;
    "Pc": boolean;
    "Connector_Punctuation": boolean;
    "Pd": boolean;
    "Dash_Punctuation": boolean;
    "Pe": boolean;
    "Close_Punctuation": boolean;
    "Pf": boolean;
    "Final_Punctuation": boolean;
    "Pi": boolean;
    "Initial_Punctuation": boolean;
    "Po": boolean;
    "Other_Punctuation": boolean;
    "Ps": boolean;
    "Open_Punctuation": boolean;
    "S": boolean;
    "Symbol": boolean;
    "Sc": boolean;
    "Currency_Symbol": boolean;
    "Sk": boolean;
    "Modifier_Symbol": boolean;
    "Sm": boolean;
    "Math_Symbol": boolean;
    "So": boolean;
    "Other_Symbol": boolean;
    "Z": boolean;
    "Separator": boolean;
    "Zl": boolean;
    "Line_Separator": boolean;
    "Zp": boolean;
    "Paragraph_Separator": boolean;
    "Zs": boolean;
    "Space_Separator": boolean;
};
/**
 * @todo test more
 */
export declare const PatternTest: {
    [k in keyof typeof UNICODE_ALL]?: IPatternTestRow[];
};
export declare const _testUnicode: {
    (name: string, RegExpClass?: RegExpConstructor, testPatterns?: {
        White_Space?: IPatternTestRow[];
        Letter?: IPatternTestRow[];
        Lower?: IPatternTestRow[];
        Upper?: IPatternTestRow[];
        Alpha?: IPatternTestRow[];
        Digit?: IPatternTestRow[];
        Alnum?: IPatternTestRow[];
        Punct?: IPatternTestRow[];
        Graph?: IPatternTestRow[];
        Blank?: IPatternTestRow[];
        Cntrl?: IPatternTestRow[];
        XDigit?: IPatternTestRow[];
        Space?: IPatternTestRow[];
        Decimal_Digit_Number?: IPatternTestRow[];
        Ideographic?: IPatternTestRow[];
        Unified_Ideograph?: IPatternTestRow[];
        "ASCII"?: IPatternTestRow[];
        "Alphabetic"?: IPatternTestRow[];
        "Any"?: IPatternTestRow[];
        "Default_Ignorable_Code_Point"?: IPatternTestRow[];
        "Lowercase"?: IPatternTestRow[];
        "Noncharacter_Code_Point"?: IPatternTestRow[];
        "Uppercase"?: IPatternTestRow[];
        "C"?: IPatternTestRow[];
        "Other"?: IPatternTestRow[];
        "Cc"?: IPatternTestRow[];
        "Control"?: IPatternTestRow[];
        "Cf"?: IPatternTestRow[];
        "Format"?: IPatternTestRow[];
        "Cn"?: IPatternTestRow[];
        "Unassigned"?: IPatternTestRow[];
        "Co"?: IPatternTestRow[];
        "Private_Use"?: IPatternTestRow[];
        "Cs"?: IPatternTestRow[];
        "Surrogate"?: IPatternTestRow[];
        "L"?: IPatternTestRow[];
        "LC"?: IPatternTestRow[];
        "Cased_Letter"?: IPatternTestRow[];
        "Ll"?: IPatternTestRow[];
        "Lowercase_Letter"?: IPatternTestRow[];
        "Lm"?: IPatternTestRow[];
        "Modifier_Letter"?: IPatternTestRow[];
        "Lo"?: IPatternTestRow[];
        "Other_Letter"?: IPatternTestRow[];
        "Lt"?: IPatternTestRow[];
        "Titlecase_Letter"?: IPatternTestRow[];
        "Lu"?: IPatternTestRow[];
        "Uppercase_Letter"?: IPatternTestRow[];
        "M"?: IPatternTestRow[];
        "Mark"?: IPatternTestRow[];
        "Mc"?: IPatternTestRow[];
        "Spacing_Mark"?: IPatternTestRow[];
        "Me"?: IPatternTestRow[];
        "Enclosing_Mark"?: IPatternTestRow[];
        "Mn"?: IPatternTestRow[];
        "Nonspacing_Mark"?: IPatternTestRow[];
        "N"?: IPatternTestRow[];
        "Number"?: IPatternTestRow[];
        "Nd"?: IPatternTestRow[];
        "Decimal_Number"?: IPatternTestRow[];
        "Nl"?: IPatternTestRow[];
        "Letter_Number"?: IPatternTestRow[];
        "No"?: IPatternTestRow[];
        "Other_Number"?: IPatternTestRow[];
        "P"?: IPatternTestRow[];
        "Punctuation"?: IPatternTestRow[];
        "Pc"?: IPatternTestRow[];
        "Connector_Punctuation"?: IPatternTestRow[];
        "Pd"?: IPatternTestRow[];
        "Dash_Punctuation"?: IPatternTestRow[];
        "Pe"?: IPatternTestRow[];
        "Close_Punctuation"?: IPatternTestRow[];
        "Pf"?: IPatternTestRow[];
        "Final_Punctuation"?: IPatternTestRow[];
        "Pi"?: IPatternTestRow[];
        "Initial_Punctuation"?: IPatternTestRow[];
        "Po"?: IPatternTestRow[];
        "Other_Punctuation"?: IPatternTestRow[];
        "Ps"?: IPatternTestRow[];
        "Open_Punctuation"?: IPatternTestRow[];
        "S"?: IPatternTestRow[];
        "Symbol"?: IPatternTestRow[];
        "Sc"?: IPatternTestRow[];
        "Currency_Symbol"?: IPatternTestRow[];
        "Sk"?: IPatternTestRow[];
        "Modifier_Symbol"?: IPatternTestRow[];
        "Sm"?: IPatternTestRow[];
        "Math_Symbol"?: IPatternTestRow[];
        "So"?: IPatternTestRow[];
        "Other_Symbol"?: IPatternTestRow[];
        "Z"?: IPatternTestRow[];
        "Separator"?: IPatternTestRow[];
        "Zl"?: IPatternTestRow[];
        "Line_Separator"?: IPatternTestRow[];
        "Zp"?: IPatternTestRow[];
        "Paragraph_Separator"?: IPatternTestRow[];
        "Zs"?: IPatternTestRow[];
        "Space_Separator"?: IPatternTestRow[];
    }): boolean;
    (name: string, RegExpClass?: ICreateRegExp, testPatterns?: {
        White_Space?: IPatternTestRow[];
        Letter?: IPatternTestRow[];
        Lower?: IPatternTestRow[];
        Upper?: IPatternTestRow[];
        Alpha?: IPatternTestRow[];
        Digit?: IPatternTestRow[];
        Alnum?: IPatternTestRow[];
        Punct?: IPatternTestRow[];
        Graph?: IPatternTestRow[];
        Blank?: IPatternTestRow[];
        Cntrl?: IPatternTestRow[];
        XDigit?: IPatternTestRow[];
        Space?: IPatternTestRow[];
        Decimal_Digit_Number?: IPatternTestRow[];
        Ideographic?: IPatternTestRow[];
        Unified_Ideograph?: IPatternTestRow[];
        "ASCII"?: IPatternTestRow[];
        "Alphabetic"?: IPatternTestRow[];
        "Any"?: IPatternTestRow[];
        "Default_Ignorable_Code_Point"?: IPatternTestRow[];
        "Lowercase"?: IPatternTestRow[];
        "Noncharacter_Code_Point"?: IPatternTestRow[];
        "Uppercase"?: IPatternTestRow[];
        "C"?: IPatternTestRow[];
        "Other"?: IPatternTestRow[];
        "Cc"?: IPatternTestRow[];
        "Control"?: IPatternTestRow[];
        "Cf"?: IPatternTestRow[];
        "Format"?: IPatternTestRow[];
        "Cn"?: IPatternTestRow[];
        "Unassigned"?: IPatternTestRow[];
        "Co"?: IPatternTestRow[];
        "Private_Use"?: IPatternTestRow[];
        "Cs"?: IPatternTestRow[];
        "Surrogate"?: IPatternTestRow[];
        "L"?: IPatternTestRow[];
        "LC"?: IPatternTestRow[];
        "Cased_Letter"?: IPatternTestRow[];
        "Ll"?: IPatternTestRow[];
        "Lowercase_Letter"?: IPatternTestRow[];
        "Lm"?: IPatternTestRow[];
        "Modifier_Letter"?: IPatternTestRow[];
        "Lo"?: IPatternTestRow[];
        "Other_Letter"?: IPatternTestRow[];
        "Lt"?: IPatternTestRow[];
        "Titlecase_Letter"?: IPatternTestRow[];
        "Lu"?: IPatternTestRow[];
        "Uppercase_Letter"?: IPatternTestRow[];
        "M"?: IPatternTestRow[];
        "Mark"?: IPatternTestRow[];
        "Mc"?: IPatternTestRow[];
        "Spacing_Mark"?: IPatternTestRow[];
        "Me"?: IPatternTestRow[];
        "Enclosing_Mark"?: IPatternTestRow[];
        "Mn"?: IPatternTestRow[];
        "Nonspacing_Mark"?: IPatternTestRow[];
        "N"?: IPatternTestRow[];
        "Number"?: IPatternTestRow[];
        "Nd"?: IPatternTestRow[];
        "Decimal_Number"?: IPatternTestRow[];
        "Nl"?: IPatternTestRow[];
        "Letter_Number"?: IPatternTestRow[];
        "No"?: IPatternTestRow[];
        "Other_Number"?: IPatternTestRow[];
        "P"?: IPatternTestRow[];
        "Punctuation"?: IPatternTestRow[];
        "Pc"?: IPatternTestRow[];
        "Connector_Punctuation"?: IPatternTestRow[];
        "Pd"?: IPatternTestRow[];
        "Dash_Punctuation"?: IPatternTestRow[];
        "Pe"?: IPatternTestRow[];
        "Close_Punctuation"?: IPatternTestRow[];
        "Pf"?: IPatternTestRow[];
        "Final_Punctuation"?: IPatternTestRow[];
        "Pi"?: IPatternTestRow[];
        "Initial_Punctuation"?: IPatternTestRow[];
        "Po"?: IPatternTestRow[];
        "Other_Punctuation"?: IPatternTestRow[];
        "Ps"?: IPatternTestRow[];
        "Open_Punctuation"?: IPatternTestRow[];
        "S"?: IPatternTestRow[];
        "Symbol"?: IPatternTestRow[];
        "Sc"?: IPatternTestRow[];
        "Currency_Symbol"?: IPatternTestRow[];
        "Sk"?: IPatternTestRow[];
        "Modifier_Symbol"?: IPatternTestRow[];
        "Sm"?: IPatternTestRow[];
        "Math_Symbol"?: IPatternTestRow[];
        "So"?: IPatternTestRow[];
        "Other_Symbol"?: IPatternTestRow[];
        "Z"?: IPatternTestRow[];
        "Separator"?: IPatternTestRow[];
        "Zl"?: IPatternTestRow[];
        "Line_Separator"?: IPatternTestRow[];
        "Zp"?: IPatternTestRow[];
        "Paragraph_Separator"?: IPatternTestRow[];
        "Zs"?: IPatternTestRow[];
        "Space_Separator"?: IPatternTestRow[];
    }): boolean;
    <T>(name: string, RegExpClass?: ITypeCreateRegExp<T>, testPatterns?: {
        White_Space?: IPatternTestRow[];
        Letter?: IPatternTestRow[];
        Lower?: IPatternTestRow[];
        Upper?: IPatternTestRow[];
        Alpha?: IPatternTestRow[];
        Digit?: IPatternTestRow[];
        Alnum?: IPatternTestRow[];
        Punct?: IPatternTestRow[];
        Graph?: IPatternTestRow[];
        Blank?: IPatternTestRow[];
        Cntrl?: IPatternTestRow[];
        XDigit?: IPatternTestRow[];
        Space?: IPatternTestRow[];
        Decimal_Digit_Number?: IPatternTestRow[];
        Ideographic?: IPatternTestRow[];
        Unified_Ideograph?: IPatternTestRow[];
        "ASCII"?: IPatternTestRow[];
        "Alphabetic"?: IPatternTestRow[];
        "Any"?: IPatternTestRow[];
        "Default_Ignorable_Code_Point"?: IPatternTestRow[];
        "Lowercase"?: IPatternTestRow[];
        "Noncharacter_Code_Point"?: IPatternTestRow[];
        "Uppercase"?: IPatternTestRow[];
        "C"?: IPatternTestRow[];
        "Other"?: IPatternTestRow[];
        "Cc"?: IPatternTestRow[];
        "Control"?: IPatternTestRow[];
        "Cf"?: IPatternTestRow[];
        "Format"?: IPatternTestRow[];
        "Cn"?: IPatternTestRow[];
        "Unassigned"?: IPatternTestRow[];
        "Co"?: IPatternTestRow[];
        "Private_Use"?: IPatternTestRow[];
        "Cs"?: IPatternTestRow[];
        "Surrogate"?: IPatternTestRow[];
        "L"?: IPatternTestRow[];
        "LC"?: IPatternTestRow[];
        "Cased_Letter"?: IPatternTestRow[];
        "Ll"?: IPatternTestRow[];
        "Lowercase_Letter"?: IPatternTestRow[];
        "Lm"?: IPatternTestRow[];
        "Modifier_Letter"?: IPatternTestRow[];
        "Lo"?: IPatternTestRow[];
        "Other_Letter"?: IPatternTestRow[];
        "Lt"?: IPatternTestRow[];
        "Titlecase_Letter"?: IPatternTestRow[];
        "Lu"?: IPatternTestRow[];
        "Uppercase_Letter"?: IPatternTestRow[];
        "M"?: IPatternTestRow[];
        "Mark"?: IPatternTestRow[];
        "Mc"?: IPatternTestRow[];
        "Spacing_Mark"?: IPatternTestRow[];
        "Me"?: IPatternTestRow[];
        "Enclosing_Mark"?: IPatternTestRow[];
        "Mn"?: IPatternTestRow[];
        "Nonspacing_Mark"?: IPatternTestRow[];
        "N"?: IPatternTestRow[];
        "Number"?: IPatternTestRow[];
        "Nd"?: IPatternTestRow[];
        "Decimal_Number"?: IPatternTestRow[];
        "Nl"?: IPatternTestRow[];
        "Letter_Number"?: IPatternTestRow[];
        "No"?: IPatternTestRow[];
        "Other_Number"?: IPatternTestRow[];
        "P"?: IPatternTestRow[];
        "Punctuation"?: IPatternTestRow[];
        "Pc"?: IPatternTestRow[];
        "Connector_Punctuation"?: IPatternTestRow[];
        "Pd"?: IPatternTestRow[];
        "Dash_Punctuation"?: IPatternTestRow[];
        "Pe"?: IPatternTestRow[];
        "Close_Punctuation"?: IPatternTestRow[];
        "Pf"?: IPatternTestRow[];
        "Final_Punctuation"?: IPatternTestRow[];
        "Pi"?: IPatternTestRow[];
        "Initial_Punctuation"?: IPatternTestRow[];
        "Po"?: IPatternTestRow[];
        "Other_Punctuation"?: IPatternTestRow[];
        "Ps"?: IPatternTestRow[];
        "Open_Punctuation"?: IPatternTestRow[];
        "S"?: IPatternTestRow[];
        "Symbol"?: IPatternTestRow[];
        "Sc"?: IPatternTestRow[];
        "Currency_Symbol"?: IPatternTestRow[];
        "Sk"?: IPatternTestRow[];
        "Modifier_Symbol"?: IPatternTestRow[];
        "Sm"?: IPatternTestRow[];
        "Math_Symbol"?: IPatternTestRow[];
        "So"?: IPatternTestRow[];
        "Other_Symbol"?: IPatternTestRow[];
        "Z"?: IPatternTestRow[];
        "Separator"?: IPatternTestRow[];
        "Zl"?: IPatternTestRow[];
        "Line_Separator"?: IPatternTestRow[];
        "Zp"?: IPatternTestRow[];
        "Paragraph_Separator"?: IPatternTestRow[];
        "Zs"?: IPatternTestRow[];
        "Space_Separator"?: IPatternTestRow[];
    }): boolean;
};
export declare function testUnicode<T>(name: string, RegExpClass?: ITypeCreateRegExp<T>, testPatterns?: typeof PatternTest): boolean;
export declare function testUnicodeAll<T>(RegExpClass?: ITypeCreateRegExp<T>, testPatterns?: {
    White_Space?: IPatternTestRow[];
    Letter?: IPatternTestRow[];
    Lower?: IPatternTestRow[];
    Upper?: IPatternTestRow[];
    Alpha?: IPatternTestRow[];
    Digit?: IPatternTestRow[];
    Alnum?: IPatternTestRow[];
    Punct?: IPatternTestRow[];
    Graph?: IPatternTestRow[];
    Blank?: IPatternTestRow[];
    Cntrl?: IPatternTestRow[];
    XDigit?: IPatternTestRow[];
    Space?: IPatternTestRow[];
    Decimal_Digit_Number?: IPatternTestRow[];
    Ideographic?: IPatternTestRow[];
    Unified_Ideograph?: IPatternTestRow[];
    "ASCII"?: IPatternTestRow[];
    "Alphabetic"?: IPatternTestRow[];
    "Any"?: IPatternTestRow[];
    "Default_Ignorable_Code_Point"?: IPatternTestRow[];
    "Lowercase"?: IPatternTestRow[];
    "Noncharacter_Code_Point"?: IPatternTestRow[];
    "Uppercase"?: IPatternTestRow[];
    "C"?: IPatternTestRow[];
    "Other"?: IPatternTestRow[];
    "Cc"?: IPatternTestRow[];
    "Control"?: IPatternTestRow[];
    "Cf"?: IPatternTestRow[];
    "Format"?: IPatternTestRow[];
    "Cn"?: IPatternTestRow[];
    "Unassigned"?: IPatternTestRow[];
    "Co"?: IPatternTestRow[];
    "Private_Use"?: IPatternTestRow[];
    "Cs"?: IPatternTestRow[];
    "Surrogate"?: IPatternTestRow[];
    "L"?: IPatternTestRow[];
    "LC"?: IPatternTestRow[];
    "Cased_Letter"?: IPatternTestRow[];
    "Ll"?: IPatternTestRow[];
    "Lowercase_Letter"?: IPatternTestRow[];
    "Lm"?: IPatternTestRow[];
    "Modifier_Letter"?: IPatternTestRow[];
    "Lo"?: IPatternTestRow[];
    "Other_Letter"?: IPatternTestRow[];
    "Lt"?: IPatternTestRow[];
    "Titlecase_Letter"?: IPatternTestRow[];
    "Lu"?: IPatternTestRow[];
    "Uppercase_Letter"?: IPatternTestRow[];
    "M"?: IPatternTestRow[];
    "Mark"?: IPatternTestRow[];
    "Mc"?: IPatternTestRow[];
    "Spacing_Mark"?: IPatternTestRow[];
    "Me"?: IPatternTestRow[];
    "Enclosing_Mark"?: IPatternTestRow[];
    "Mn"?: IPatternTestRow[];
    "Nonspacing_Mark"?: IPatternTestRow[];
    "N"?: IPatternTestRow[];
    "Number"?: IPatternTestRow[];
    "Nd"?: IPatternTestRow[];
    "Decimal_Number"?: IPatternTestRow[];
    "Nl"?: IPatternTestRow[];
    "Letter_Number"?: IPatternTestRow[];
    "No"?: IPatternTestRow[];
    "Other_Number"?: IPatternTestRow[];
    "P"?: IPatternTestRow[];
    "Punctuation"?: IPatternTestRow[];
    "Pc"?: IPatternTestRow[];
    "Connector_Punctuation"?: IPatternTestRow[];
    "Pd"?: IPatternTestRow[];
    "Dash_Punctuation"?: IPatternTestRow[];
    "Pe"?: IPatternTestRow[];
    "Close_Punctuation"?: IPatternTestRow[];
    "Pf"?: IPatternTestRow[];
    "Final_Punctuation"?: IPatternTestRow[];
    "Pi"?: IPatternTestRow[];
    "Initial_Punctuation"?: IPatternTestRow[];
    "Po"?: IPatternTestRow[];
    "Other_Punctuation"?: IPatternTestRow[];
    "Ps"?: IPatternTestRow[];
    "Open_Punctuation"?: IPatternTestRow[];
    "S"?: IPatternTestRow[];
    "Symbol"?: IPatternTestRow[];
    "Sc"?: IPatternTestRow[];
    "Currency_Symbol"?: IPatternTestRow[];
    "Sk"?: IPatternTestRow[];
    "Modifier_Symbol"?: IPatternTestRow[];
    "Sm"?: IPatternTestRow[];
    "Math_Symbol"?: IPatternTestRow[];
    "So"?: IPatternTestRow[];
    "Other_Symbol"?: IPatternTestRow[];
    "Z"?: IPatternTestRow[];
    "Separator"?: IPatternTestRow[];
    "Zl"?: IPatternTestRow[];
    "Line_Separator"?: IPatternTestRow[];
    "Zp"?: IPatternTestRow[];
    "Paragraph_Separator"?: IPatternTestRow[];
    "Zs"?: IPatternTestRow[];
    "Space_Separator"?: IPatternTestRow[];
}): {
    White_Space: boolean;
    Letter: boolean;
    Lower: boolean;
    Upper: boolean;
    Alpha: boolean;
    Digit: boolean;
    Alnum: boolean;
    Punct: boolean;
    Graph: boolean;
    Blank: boolean;
    Cntrl: boolean;
    XDigit: boolean;
    Space: boolean;
    Decimal_Digit_Number: boolean;
    Ideographic: boolean;
    Unified_Ideograph: boolean;
    "ASCII": boolean;
    "Alphabetic": boolean;
    "Any": boolean;
    "Default_Ignorable_Code_Point": boolean;
    "Lowercase": boolean;
    "Noncharacter_Code_Point": boolean;
    "Uppercase": boolean;
    "C": boolean;
    "Other": boolean;
    "Cc": boolean;
    "Control": boolean;
    "Cf": boolean;
    "Format": boolean;
    "Cn": boolean;
    "Unassigned": boolean;
    "Co": boolean;
    "Private_Use": boolean;
    "Cs": boolean;
    "Surrogate": boolean;
    "L": boolean;
    "LC": boolean;
    "Cased_Letter": boolean;
    "Ll": boolean;
    "Lowercase_Letter": boolean;
    "Lm": boolean;
    "Modifier_Letter": boolean;
    "Lo": boolean;
    "Other_Letter": boolean;
    "Lt": boolean;
    "Titlecase_Letter": boolean;
    "Lu": boolean;
    "Uppercase_Letter": boolean;
    "M": boolean;
    "Mark": boolean;
    "Mc": boolean;
    "Spacing_Mark": boolean;
    "Me": boolean;
    "Enclosing_Mark": boolean;
    "Mn": boolean;
    "Nonspacing_Mark": boolean;
    "N": boolean;
    "Number": boolean;
    "Nd": boolean;
    "Decimal_Number": boolean;
    "Nl": boolean;
    "Letter_Number": boolean;
    "No": boolean;
    "Other_Number": boolean;
    "P": boolean;
    "Punctuation": boolean;
    "Pc": boolean;
    "Connector_Punctuation": boolean;
    "Pd": boolean;
    "Dash_Punctuation": boolean;
    "Pe": boolean;
    "Close_Punctuation": boolean;
    "Pf": boolean;
    "Final_Punctuation": boolean;
    "Pi": boolean;
    "Initial_Punctuation": boolean;
    "Po": boolean;
    "Other_Punctuation": boolean;
    "Ps": boolean;
    "Open_Punctuation": boolean;
    "S": boolean;
    "Symbol": boolean;
    "Sc": boolean;
    "Currency_Symbol": boolean;
    "Sk": boolean;
    "Modifier_Symbol": boolean;
    "Sm": boolean;
    "Math_Symbol": boolean;
    "So": boolean;
    "Other_Symbol": boolean;
    "Z": boolean;
    "Separator": boolean;
    "Zl": boolean;
    "Line_Separator": boolean;
    "Zp": boolean;
    "Paragraph_Separator": boolean;
    "Zs": boolean;
    "Space_Separator": boolean;
};
export declare function wrapToRegexName(name: string, negation?: boolean): string;
import * as self from './unicode';
export default self;
