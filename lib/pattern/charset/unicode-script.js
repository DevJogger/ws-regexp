"use strict";
/**
 * Created by user on 2018/5/6/006.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const property_data_1 = require("../cache/property-data");
const index_1 = require("../../util/index");
const index_2 = require("./index");
const scripts_1 = require("../cache/scripts");
exports.KEY_PREFIX = '\\p{Script=';
exports.KEY_PREFIX_NEGATION = '\\P{Script=';
exports.KEY_SUFFIX = '}';
/**
 * @link http://2ality.com/2017/07/regexp-unicode-property-escapes.html
 * @link https://en.wikipedia.org/wiki/Unicode_character_property
 */
exports.UNICODE_SCRIPTS = {
    Greek: false,
    Latin: false,
    Katakana: false,
    Hiragana: false,
    Han: false,
    Hangul: false,
};
exports.UNICODE_SCRIPTS_ALL = {
    ...scripts_1.default,
    ...property_data_1.default.Script,
    ...exports.UNICODE_SCRIPTS,
};
var UNICODE_SCRIPTS_NAME_ALIAS;
(function (UNICODE_SCRIPTS_NAME_ALIAS) {
    UNICODE_SCRIPTS_NAME_ALIAS["Arabic"] = "Arab";
    UNICODE_SCRIPTS_NAME_ALIAS["Bengali"] = "Beng";
    UNICODE_SCRIPTS_NAME_ALIAS["Coptic"] = "Copt";
    UNICODE_SCRIPTS_NAME_ALIAS["Cyrillic"] = "Cyrl";
    UNICODE_SCRIPTS_NAME_ALIAS["Ethiopic"] = "Ethi";
    UNICODE_SCRIPTS_NAME_ALIAS["Georgian"] = "Geor";
    UNICODE_SCRIPTS_NAME_ALIAS["Greek"] = "Grek";
    UNICODE_SCRIPTS_NAME_ALIAS["Han"] = "Hani";
    UNICODE_SCRIPTS_NAME_ALIAS["Katakana"] = "Kana";
    UNICODE_SCRIPTS_NAME_ALIAS["Hiragana"] = "Hira";
    UNICODE_SCRIPTS_NAME_ALIAS["Latin"] = "Latn";
    UNICODE_SCRIPTS_NAME_ALIAS["Tamil"] = "Taml";
    UNICODE_SCRIPTS_NAME_ALIAS["Tibetan"] = "Tibt";
})(UNICODE_SCRIPTS_NAME_ALIAS = exports.UNICODE_SCRIPTS_NAME_ALIAS || (exports.UNICODE_SCRIPTS_NAME_ALIAS = {}));
Object.keys(UNICODE_SCRIPTS_NAME_ALIAS)
    .forEach(function (key) {
    let k2 = UNICODE_SCRIPTS_NAME_ALIAS[key];
    if (k2 && !UNICODE_SCRIPTS_NAME_ALIAS[k2]) {
        // @ts-ignore
        UNICODE_SCRIPTS_NAME_ALIAS[k2] = key;
    }
});
exports.PatternTest = {
    Greek: [
        ['^\\p{Script=Greek}+$', 'u', 'μετά', true, 'test'],
    ],
    Latin: [
        ['^\\p{Script=Latin}+$', 'u', 'Grüße', true, 'test'],
        ['^\\p{Script=Latin}+$', 'u', 'façon', true, 'test'],
        ['^\\p{Script=Latin}+$', 'u', 'mañana', true, 'test'],
    ],
    Katakana: [
        ['^\\p{Script=Katakana}+$', 'u', 'カタカナ', true, 'test'],
    ],
    Hiragana: [
        ['^\\p{Script=Hiragana}+$', 'u', 'ひらがな', true, 'test'],
    ],
    Han: [
        ['^\\p{Script=Han}+$', 'u', 'カタカナ', false, 'test'],
        ['^\\p{Script=Han}+$', 'u', '可以知道', true, 'test'],
    ],
    Hangul: [
        ['^\\p{Script=Hangul}+$', 'u', '\u1190', true, 'test'],
    ],
    Common: [
        ['^\\p{Script=Common}+$', 'u', '!', true, 'test'],
    ],
    Arabic: [
        ['^\\p{Script=Arabic}+$', 'u', 'لمو', true, 'test'],
    ],
    Bengali: [
        ['^\\p{Script=Bengali}+$', 'u', 'আমার', true, 'test'],
    ],
    Cyrillic: [
        ['^\\p{Script=Cyrillic}+$', 'u', 'летачко', true, 'test'],
    ],
    Ethiopic: [
        ['^\\p{Script=Ethiopic}+$', 'u', 'ማንዣበቢያ', true, 'test'],
    ],
    Georgian: [
        ['^\\p{Script=Georgian}+$', 'u', 'ხომალდი', true, 'test'],
    ],
    Coptic: [
        ['^\\p{Script=Coptic}+$', 'u', 'Ϫ', true, 'test'],
        ['^\\p{Script=Coptic}+$', 'u', '\u03ea', true, 'test'],
    ],
    Tamil: [
        ['^\\p{Script=Tamil}+$', 'u', '்', true, 'test'],
        ['^\\p{Script=Tamil}+$', 'u', '\u0bcd', true, 'test'],
    ],
    Tibetan: [
        ['^\\p{Script=Tibetan}+$', 'u', '༬', true, 'test'],
        ['^\\p{Script=Tibetan}+$', 'u', '\u0f2c', true, 'test'],
    ],
};
exports._testUnicodeScript = index_1._createFnTestPattern(exports.PatternTest);
function testUnicodeScript(name, RegExpClass, testPatterns = exports.PatternTest) {
    if (!exports.PatternTest.hasOwnProperty(name) && UNICODE_SCRIPTS_NAME_ALIAS[name] && exports.PatternTest.hasOwnProperty(UNICODE_SCRIPTS_NAME_ALIAS[name])) {
        name = UNICODE_SCRIPTS_NAME_ALIAS[name];
    }
    return exports._testUnicodeScript(name, RegExpClass, testPatterns);
}
exports.testUnicodeScript = testUnicodeScript;
// @ts-ignore
function testUnicodeScriptAll(RegExpClass = RegExp, testPatterns = exports.PatternTest) {
    return Object.keys(exports.UNICODE_SCRIPTS_ALL).reduce(function (a, key) {
        a[key] = testUnicodeScript(key, RegExpClass, testPatterns);
        return a;
    }, {});
}
exports.testUnicodeScriptAll = testUnicodeScriptAll;
function wrapToRegexName(name, negation) {
    let prefix = exports.KEY_PREFIX;
    if (negation) {
        prefix = exports.KEY_PREFIX_NEGATION;
    }
    return index_2._wrapToRegexName(name, prefix, exports.KEY_SUFFIX);
}
exports.wrapToRegexName = wrapToRegexName;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pY29kZS1zY3JpcHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1bmljb2RlLXNjcmlwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsMERBQXlEO0FBR3pELDRDQUFpRTtBQUNqRSxtQ0FBMkM7QUFLM0MsOENBQTZDO0FBRWhDLFFBQUEsVUFBVSxHQUFHLGFBQWEsQ0FBQztBQUMzQixRQUFBLG1CQUFtQixHQUFHLGFBQWEsQ0FBQztBQUNwQyxRQUFBLFVBQVUsR0FBRyxHQUFHLENBQUM7QUFFOUI7OztHQUdHO0FBQ1UsUUFBQSxlQUFlLEdBQUc7SUFFOUIsS0FBSyxFQUFFLEtBQUs7SUFDWixLQUFLLEVBQUUsS0FBSztJQUVaLFFBQVEsRUFBRSxLQUFLO0lBQ2YsUUFBUSxFQUFFLEtBQUs7SUFFZixHQUFHLEVBQUUsS0FBSztJQUNWLE1BQU0sRUFBRSxLQUFLO0NBRWIsQ0FBQztBQUVXLFFBQUEsbUJBQW1CLEdBQUc7SUFDbEMsR0FBRyxpQkFBYTtJQUVoQixHQUFHLHVCQUFtQixDQUFDLE1BQU07SUFFN0IsR0FBRyx1QkFBZTtDQUNsQixDQUFDO0FBRUYsSUFBWSwwQkFvQlg7QUFwQkQsV0FBWSwwQkFBMEI7SUFFckMsNkNBQWUsQ0FBQTtJQUNmLDhDQUFnQixDQUFBO0lBQ2hCLDZDQUFlLENBQUE7SUFDZiwrQ0FBaUIsQ0FBQTtJQUVqQiwrQ0FBaUIsQ0FBQTtJQUNqQiwrQ0FBaUIsQ0FBQTtJQUNqQiw0Q0FBYyxDQUFBO0lBQ2QsMENBQVksQ0FBQTtJQUVaLCtDQUFpQixDQUFBO0lBQ2pCLCtDQUFpQixDQUFBO0lBR2pCLDRDQUFjLENBQUE7SUFDZCw0Q0FBYyxDQUFBO0lBQ2QsOENBQWdCLENBQUE7QUFFakIsQ0FBQyxFQXBCVywwQkFBMEIsR0FBMUIsa0NBQTBCLEtBQTFCLGtDQUEwQixRQW9CckM7QUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDO0tBQ3JDLE9BQU8sQ0FBQyxVQUFV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Q0FVQztBQUVELGtCQUFlLE9BQTRDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzUvNi8wMDYuXG4gKi9cblxuaW1wb3J0IENBQ0hFX1BST1BFUlRZX0RBVEEgZnJvbSAnLi4vY2FjaGUvcHJvcGVydHktZGF0YSc7XG5pbXBvcnQgeyBJQ3JlYXRlUmVnRXhwLCBJVHlwZUNyZWF0ZVJlZ0V4cCB9IGZyb20gJy4uLy4uL2luZGV4JztcbmltcG9ydCB7IElQYXR0ZXJuVGVzdEZuLCBJUGF0dGVyblRlc3RSb3csIFBhdHRlcm5TdXBwb3J0LCB0ZXN0UGF0dGVybiB9IGZyb20gJy4uLy4uL3BhdHRlcm4nO1xuaW1wb3J0IHsgX2NyZWF0ZUZuVGVzdFBhdHRlcm4sIGxvZ19kaXIgfSBmcm9tICcuLi8uLi91dGlsL2luZGV4JztcbmltcG9ydCB7IF93cmFwVG9SZWdleE5hbWUgfSBmcm9tICcuL2luZGV4JztcblxuaW1wb3J0IENBQ0hFX0JMT0NLUyBmcm9tICcuLi9jYWNoZS9ibG9ja3MnO1xuaW1wb3J0IENBQ0hFX0NBVEVHT1JJRVMgZnJvbSAnLi4vY2FjaGUvY2F0ZWdvcmllcyc7XG5pbXBvcnQgQ0FDSEVfUFJPUEVSVElFUyBmcm9tICcuLi9jYWNoZS9wcm9wZXJ0aWVzJztcbmltcG9ydCBDQUNIRV9TQ1JJUFRTIGZyb20gJy4uL2NhY2hlL3NjcmlwdHMnO1xuXG5leHBvcnQgY29uc3QgS0VZX1BSRUZJWCA9ICdcXFxccHtTY3JpcHQ9JztcbmV4cG9ydCBjb25zdCBLRVlfUFJFRklYX05FR0FUSU9OID0gJ1xcXFxQe1NjcmlwdD0nO1xuZXhwb3J0IGNvbnN0IEtFWV9TVUZGSVggPSAnfSc7XG5cbi8qKlxuICogQGxpbmsgaHR0cDovLzJhbGl0eS5jb20vMjAxNy8wNy9yZWdleHAtdW5pY29kZS1wcm9wZXJ0eS1lc2NhcGVzLmh0bWxcbiAqIEBsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VuaWNvZGVfY2hhcmFjdGVyX3Byb3BlcnR5XG4gKi9cbmV4cG9ydCBjb25zdCBVTklDT0RFX1NDUklQVFMgPSB7XG5cblx0R3JlZWs6IGZhbHNlLFxuXHRMYXRpbjogZmFsc2UsXG5cblx0S2F0YWthbmE6IGZhbHNlLFxuXHRIaXJhZ2FuYTogZmFsc2UsXG5cblx0SGFuOiBmYWxzZSxcblx0SGFuZ3VsOiBmYWxzZSxcblxufTtcblxuZXhwb3J0IGNvbnN0IFVOSUNPREVfU0NSSVBUU19BTEwgPSB7XG5cdC4uLkNBQ0hFX1NDUklQVFMsXG5cblx0Li4uQ0FDSEVfUFJPUEVSVFlfREFUQS5TY3JpcHQsXG5cblx0Li4uVU5JQ09ERV9TQ1JJUFRTLFxufTtcblxuZXhwb3J0IGVudW0gVU5JQ09ERV9TQ1JJUFRTX05BTUVfQUxJQVNcbntcblx0QXJhYmljID0gJ0FyYWInLFxuXHRCZW5nYWxpID0gJ0JlbmcnLFxuXHRDb3B0aWMgPSAnQ29wdCcsXG5cdEN5cmlsbGljID0gJ0N5cmwnLFxuXG5cdEV0aGlvcGljID0gJ0V0aGknLFxuXHRHZW9yZ2lhbiA9ICdHZW9yJyxcblx0R3JlZWsgPSAnR3JlaycsXG5cdEhhbiA9ICdIYW5pJyxcblxuXHRLYXRha2FuYSA9ICdLYW5hJyxcblx0SGlyYWdhbmEgPSAnSGlyYScsXG5cblxuXHRMYXRpbiA9ICdMYXRuJyxcblx0VGFtaWwgPSAnVGFtbCcsXG5cdFRpYmV0YW4gPSAnVGlidCcsXG5cbn1cblxuT2JqZWN0LmtleXMoVU5JQ09ERV9TQ1JJUFRTX05BTUVfQUxJQVMpXG5cdC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpXG5cdHtcblx0XHRsZXQgazIgPSBVTklDT0RFX1NDUklQVFNfTkFNRV9BTElBU1trZXldO1xuXG5cdFx0aWYgKGsyICYmICFVTklDT0RFX1NDUklQVFNfTkFNRV9BTElBU1trMl0pXG5cdFx0e1xuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0VU5JQ09ERV9TQ1JJUFRTX05BTUVfQUxJQVNbazJdID0ga2V5O1xuXHRcdH1cblx0fSlcbjtcblxuZXhwb3J0IGNvbnN0IFBhdHRlcm5UZXN0OiB7XG5cdFtrIGluIGtleW9mIHR5cGVvZiBVTklDT0RFX1NDUklQVFNfQUxMXT86IElQYXR0ZXJuVGVzdFJvd1tdO1xufSA9IHtcblxuXHRHcmVlazogW1xuXHRcdFsnXlxcXFxwe1NjcmlwdD1HcmVla30rJCcsICd1JywgJ868zrXPhM6sJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XSxcblxuXHRMYXRpbjogW1xuXHRcdFsnXlxcXFxwe1NjcmlwdD1MYXRpbn0rJCcsICd1JywgJ0dyw7zDn2UnLCB0cnVlLCAndGVzdCddLFxuXHRcdFsnXlxcXFxwe1NjcmlwdD1MYXRpbn0rJCcsICd1JywgJ2Zhw6dvbicsIHRydWUsICd0ZXN0J10sXG5cdFx0WydeXFxcXHB7U2NyaXB0PUxhdGlufSskJywgJ3UnLCAnbWHDsWFuYScsIHRydWUsICd0ZXN0J10sXG5cdF0sXG5cblx0S2F0YWthbmE6IFtcblx0XHRbJ15cXFxccHtTY3JpcHQ9S2F0YWthbmF9KyQnLCAndScsICfjgqvjgr/jgqvjg4onLCB0cnVlLCAndGVzdCddLFxuXHRdLFxuXG5cdEhpcmFnYW5hOiBbXG5cdFx0WydeXFxcXHB7U2NyaXB0PUhpcmFnYW5hfSskJywgJ3UnLCAn44Gy44KJ44GM44GqJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XSxcblxuXHRIYW46IFtcblx0XHRbJ15cXFxccHtTY3JpcHQ9SGFufSskJywgJ3UnLCAn44Kr44K/44Kr44OKJywgZmFsc2UsICd0ZXN0J10sXG5cdFx0WydeXFxcXHB7U2NyaXB0PUhhbn0rJCcsICd1JywgJ+WPr+S7peefpemBkycsIHRydWUsICd0ZXN0J10sXG5cdF0sXG5cblx0SGFuZ3VsOiBbXG5cdFx0WydeXFxcXHB7U2NyaXB0PUhhbmd1bH0rJCcsICd1JywgJ1xcdTExOTAnLCB0cnVlLCAndGVzdCddLFxuXHRdLFxuXG5cdENvbW1vbjogW1xuXHRcdFsnXlxcXFxwe1NjcmlwdD1Db21tb259KyQnLCAndScsICchJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XSxcblxuXHRBcmFiaWM6IFtcblx0XHRbJ15cXFxccHtTY3JpcHQ9QXJhYmljfSskJywgJ3UnLCAn2YTZhdmIJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XSxcblxuXHRCZW5nYWxpOiBbXG5cdFx0WydeXFxcXHB7U2NyaXB0PUJlbmdhbGl9KyQnLCAndScsICfgpobgpq7gpr7gprAnLCB0cnVlLCAndGVzdCddLFxuXHRdLFxuXHRDeXJpbGxpYzogW1xuXHRcdFsnXlxcXFxwe1NjcmlwdD1DeXJpbGxpY30rJCcsICd1JywgJ9C70LXRgtCw0YfQutC+JywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XSxcblx0RXRoaW9waWM6IFtcblx0XHRbJ15cXFxccHtTY3JpcHQ9RXRoaW9waWN9KyQnLCAndScsICfhiJvhipXhi6PhiaDhiaLhi6snLCB0cnVlLCAndGVzdCddLFxuXHRdLFxuXHRHZW9yZ2lhbjogW1xuXHRcdFsnXlxcXFxwe1NjcmlwdD1HZW9yZ2lhbn0rJCcsICd1JywgJ+GDruGDneGDm+GDkOGDmuGDk+GDmCcsIHRydWUsICd0ZXN0J10sXG5cdF0sXG5cblx0Q29wdGljOiBbXG5cdFx0WydeXFxcXHB7U2NyaXB0PUNvcHRpY30rJCcsICd1JywgJ8+qJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XHRbJ15cXFxccHtTY3JpcHQ9Q29wdGljfSskJywgJ3UnLCAnXFx1MDNlYScsIHRydWUsICd0ZXN0J10sXG5cdF0sXG5cblx0VGFtaWw6IFtcblx0XHRbJ15cXFxccHtTY3JpcHQ9VGFtaWx9KyQnLCAndScsICfgr40nLCB0cnVlLCAndGVzdCddLFxuXHRcdFsnXlxcXFxwe1NjcmlwdD1UYW1pbH0rJCcsICd1JywgJ1xcdTBiY2QnLCB0cnVlLCAndGVzdCddLFxuXHRdLFxuXG5cdFRpYmV0YW46IFtcblx0XHRbJ15cXFxccHtTY3JpcHQ9VGliZXRhbn0rJCcsICd1JywgJ+C8rCcsIHRydWUsICd0ZXN0J10sXG5cdFx0WydeXFxcXHB7U2NyaXB0PVRpYmV0YW59KyQnLCAndScsICdcXHUwZjJjJywgdHJ1ZSwgJ3Rlc3QnXSxcblx0XSxcblxufTtcblxuZXhwb3J0IGNvbnN0IF90ZXN0VW5pY29kZVNjcmlwdCA9IF9jcmVhdGVGblRlc3RQYXR0ZXJuKFBhdHRlcm5UZXN0KTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRlc3RVbmljb2RlU2NyaXB0PFQ+KG5hbWU6IHN0cmluZywgUmVnRXhwQ2xhc3M/OiBJVHlwZUNyZWF0ZVJlZ0V4cDxUPiwgdGVzdFBhdHRlcm5zOiB0eXBlb2YgUGF0dGVyblRlc3QgPSBQYXR0ZXJuVGVzdCk6IGJvb2xlYW5cbntcblx0aWYgKCFQYXR0ZXJuVGVzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBVTklDT0RFX1NDUklQVFNfTkFNRV9BTElBU1tuYW1lXSAmJiBQYXR0ZXJuVGVzdC5oYXNPd25Qcm9wZXJ0eShVTklDT0RFX1NDUklQVFNfTkFNRV9BTElBU1tuYW1lXSkpXG5cdHtcblx0XHRuYW1lID0gVU5JQ09ERV9TQ1JJUFRTX05BTUVfQUxJQVNbbmFtZV07XG5cdH1cblxuXHRyZXR1cm4gX3Rlc3RVbmljb2RlU2NyaXB0KG5hbWUsIFJlZ0V4cENsYXNzLCB0ZXN0UGF0dGVybnMpO1xufVxuXG4vLyBAdHMtaWdub3JlXG5leHBvcnQgZnVuY3Rpb24gdGVzdFVuaWNvZGVTY3JpcHRBbGw8VD4oUmVnRXhwQ2xhc3M6IElUeXBlQ3JlYXRlUmVnRXhwPFQ+ID0gUmVnRXhwLCB0ZXN0UGF0dGVybnMgPSBQYXR0ZXJuVGVzdClcbntcblx0cmV0dXJuIE9iamVjdC5rZXlzKFVOSUNPREVfU0NSSVBUU19BTEwpLnJlZHVjZShmdW5jdGlvbiAoYSwga2V5KVxuXHR7XG5cdFx0YVtrZXldID0gdGVzdFVuaWNvZGVTY3JpcHQoa2V5LCBSZWdFeHBDbGFzcywgdGVzdFBhdHRlcm5zKTtcblx0XHRyZXR1cm4gYTtcblx0fSwge30gYXMgdHlwZW9mIFVOSUNPREVfU0NSSVBUU19BTEwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFRvUmVnZXhOYW1lKG5hbWU6IHN0cmluZywgbmVnYXRpb24/OiBib29sZWFuKVxue1xuXHRsZXQgcHJlZml4ID0gS0VZX1BSRUZJWDtcblxuXHRpZiAobmVnYXRpb24pXG5cdHtcblx0XHRwcmVmaXggPSBLRVlfUFJFRklYX05FR0FUSU9OO1xuXHR9XG5cblx0cmV0dXJuIF93cmFwVG9SZWdleE5hbWUobmFtZSwgcHJlZml4LCBLRVlfU1VGRklYKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cyBhcyB0eXBlb2YgaW1wb3J0KCcuL3VuaWNvZGUtc2NyaXB0Jyk7XG4iXX0=