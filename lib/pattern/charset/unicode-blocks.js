"use strict";
/**
 * Created by user on 2018/5/6/006.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../util/index");
const index_2 = require("./index");
const blocks_1 = require("../cache/blocks");
exports.KEY_PREFIX = '\\p{';
exports.KEY_PREFIX_NEGATION = '\\P{';
exports.KEY_SUFFIX = '}';
/**
 * @link http://2ality.com/2017/07/regexp-unicode-property-escapes.html
 * @link https://en.wikipedia.org/wiki/Unicode_character_property
 */
exports.UNICODE_BLOCKS = {
    InBasic_Latin: false,
};
exports.UNICODE_BLOCKS_ALL = {
    ...blocks_1.default,
    ...exports.UNICODE_BLOCKS,
};
exports.PatternTest = {
    InBasic_Latin: [
        ['^\\p{InBasic_Latin}+$', 'u', '\u007F', true, 'test'],
        ['^\\p{InBasic_Latin}+$', 'u', '\u0080', false, 'test'],
    ],
};
exports.testUnicodeBlocks = index_1._createFnTestPattern(exports.PatternTest);
// @ts-ignore
function testUnicodeBlocksAll(RegExpClass = RegExp, testPatterns = exports.PatternTest) {
    return Object.keys(exports.UNICODE_BLOCKS_ALL).reduce(function (a, key) {
        a[key] = exports.testUnicodeBlocks(key, RegExpClass, testPatterns);
        return a;
    }, {});
}
exports.testUnicodeBlocksAll = testUnicodeBlocksAll;
function wrapToRegexName(name, negation) {
    let prefix = exports.KEY_PREFIX;
    if (negation) {
        prefix = exports.KEY_PREFIX_NEGATION;
    }
    return index_2._wrapToRegexName(name, prefix, exports.KEY_SUFFIX);
}
exports.wrapToRegexName = wrapToRegexName;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pY29kZS1ibG9ja3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1bmljb2RlLWJsb2Nrcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBSUgsNENBQWlFO0FBQ2pFLG1DQUEyQztBQUUzQyw0Q0FBMkM7QUFLOUIsUUFBQSxVQUFVLEdBQUcsTUFBTSxDQUFDO0FBQ3BCLFFBQUEsbUJBQW1CLEdBQUcsTUFBTSxDQUFDO0FBQzdCLFFBQUEsVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUU5Qjs7O0dBR0c7QUFDVSxRQUFBLGNBQWMsR0FBRztJQUU3QixhQUFhLEVBQUUsS0FBSztDQUVwQixDQUFDO0FBRVcsUUFBQSxrQkFBa0IsR0FBRztJQUNqQyxHQUFHLGdCQUFZO0lBRWYsR0FBRyxzQkFBYztDQUNqQixDQUFDO0FBRVcsUUFBQSxXQUFXLEdBRXBCO0lBRUgsYUFBYSxFQUFFO1FBRWQsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUM7UUFDdEQsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7S0FFdkQ7Q0FFRCxDQUFDO0FBRVcsUUFBQSxpQkFBaUIsR0FBRyw0QkFBb0IsQ0FBQyxtQkFBVyxDQUFDLENBQUM7QUFFbkUsYUFBYTtBQUNiLFNBQWdCLG9CQUFvQixDQUFJLGNBQW9DLE1BQU0sRUFBRSxZQUFZLEdBQUcsbUJBQVc7SUFFN0csT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUc7UUFFN0QsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLHlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDLEVBQUUsRUFBK0IsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFQRCxvREFPQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxJQUFZLEVBQUUsUUFBa0I7SUFFL0QsSUFBSSxNQUFNLEdBQUcsa0JBQVUsQ0FBQztJQUV4QixJQUFJLFFBQVEsRUFDWjtRQUNDLE1BQU0sR0FBRywyQkFBbUIsQ0FBQztLQUM3QjtJQUVELE9BQU8sd0JBQWdCLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxrQkFBVSxDQUFDLENBQUM7QUFDbkQsQ0FBQztBQVZELDBDQVVDO0FBRUQsa0JBQWUsT0FBNEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTgvNS82LzAwNi5cbiAqL1xuXG5pbXBvcnQgeyBJQ3JlYXRlUmVnRXhwLCBJVHlwZUNyZWF0ZVJlZ0V4cCB9IGZyb20gJy4uLy4uL2luZGV4JztcbmltcG9ydCB7IElQYXR0ZXJuVGVzdEZuLCBJUGF0dGVyblRlc3RSb3csIFBhdHRlcm5TdXBwb3J0LCB0ZXN0UGF0dGVybiB9IGZyb20gJy4uLy4uL3BhdHRlcm4nO1xuaW1wb3J0IHsgX2NyZWF0ZUZuVGVzdFBhdHRlcm4sIGxvZ19kaXIgfSBmcm9tICcuLi8uLi91dGlsL2luZGV4JztcbmltcG9ydCB7IF93cmFwVG9SZWdleE5hbWUgfSBmcm9tICcuL2luZGV4JztcblxuaW1wb3J0IENBQ0hFX0JMT0NLUyBmcm9tICcuLi9jYWNoZS9ibG9ja3MnO1xuaW1wb3J0IENBQ0hFX0NBVEVHT1JJRVMgZnJvbSAnLi4vY2FjaGUvY2F0ZWdvcmllcyc7XG5pbXBvcnQgQ0FDSEVfUFJPUEVSVElFUyBmcm9tICcuLi9jYWNoZS9wcm9wZXJ0aWVzJztcbmltcG9ydCBDQUNIRV9TQ1JJUFRTIGZyb20gJy4uL2NhY2hlL3NjcmlwdHMnO1xuXG5leHBvcnQgY29uc3QgS0VZX1BSRUZJWCA9ICdcXFxccHsnO1xuZXhwb3J0IGNvbnN0IEtFWV9QUkVGSVhfTkVHQVRJT04gPSAnXFxcXFB7JztcbmV4cG9ydCBjb25zdCBLRVlfU1VGRklYID0gJ30nO1xuXG4vKipcbiAqIEBsaW5rIGh0dHA6Ly8yYWxpdHkuY29tLzIwMTcvMDcvcmVnZXhwLXVuaWNvZGUtcHJvcGVydHktZXNjYXBlcy5odG1sXG4gKiBAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Vbmljb2RlX2NoYXJhY3Rlcl9wcm9wZXJ0eVxuICovXG5leHBvcnQgY29uc3QgVU5JQ09ERV9CTE9DS1MgPSB7XG5cblx0SW5CYXNpY19MYXRpbjogZmFsc2UsXG5cbn07XG5cbmV4cG9ydCBjb25zdCBVTklDT0RFX0JMT0NLU19BTEwgPSB7XG5cdC4uLkNBQ0hFX0JMT0NLUyxcblxuXHQuLi5VTklDT0RFX0JMT0NLUyxcbn07XG5cbmV4cG9ydCBjb25zdCBQYXR0ZXJuVGVzdDoge1xuXHRbayBpbiBrZXlvZiB0eXBlb2YgVU5JQ09ERV9CTE9DS1NfQUxMXT86IElQYXR0ZXJuVGVzdFJvd1tdO1xufSA9IHtcblxuXHRJbkJhc2ljX0xhdGluOiBbXG5cblx0XHRbJ15cXFxccHtJbkJhc2ljX0xhdGlufSskJywgJ3UnLCAnXFx1MDA3RicsIHRydWUsICd0ZXN0J10sXG5cdFx0WydeXFxcXHB7SW5CYXNpY19MYXRpbn0rJCcsICd1JywgJ1xcdTAwODAnLCBmYWxzZSwgJ3Rlc3QnXSxcblxuXHRdLFxuXG59O1xuXG5leHBvcnQgY29uc3QgdGVzdFVuaWNvZGVCbG9ja3MgPSBfY3JlYXRlRm5UZXN0UGF0dGVybihQYXR0ZXJuVGVzdCk7XG5cbi8vIEB0cy1pZ25vcmVcbmV4cG9ydCBmdW5jdGlvbiB0ZXN0VW5pY29kZUJsb2Nrc0FsbDxUPihSZWdFeHBDbGFzczogSVR5cGVDcmVhdGVSZWdFeHA8VD4gPSBSZWdFeHAsIHRlc3RQYXR0ZXJucyA9IFBhdHRlcm5UZXN0KVxue1xuXHRyZXR1cm4gT2JqZWN0LmtleXMoVU5JQ09ERV9CTE9DS1NfQUxMKS5yZWR1Y2UoZnVuY3Rpb24gKGEsIGtleSlcblx0e1xuXHRcdGFba2V5XSA9IHRlc3RVbmljb2RlQmxvY2tzKGtleSwgUmVnRXhwQ2xhc3MsIHRlc3RQYXR0ZXJucyk7XG5cdFx0cmV0dXJuIGE7XG5cdH0sIHt9IGFzIHR5cGVvZiBVTklDT0RFX0JMT0NLU19BTEwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcFRvUmVnZXhOYW1lKG5hbWU6IHN0cmluZywgbmVnYXRpb24/OiBib29sZWFuKVxue1xuXHRsZXQgcHJlZml4ID0gS0VZX1BSRUZJWDtcblxuXHRpZiAobmVnYXRpb24pXG5cdHtcblx0XHRwcmVmaXggPSBLRVlfUFJFRklYX05FR0FUSU9OO1xuXHR9XG5cblx0cmV0dXJuIF93cmFwVG9SZWdleE5hbWUobmFtZSwgcHJlZml4LCBLRVlfU1VGRklYKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cyBhcyB0eXBlb2YgaW1wb3J0KCcuL3VuaWNvZGUtc2NyaXB0Jyk7XG4iXX0=