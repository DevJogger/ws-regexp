"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const conv_1 = require("./conv");
const regexp_parser_event_1 = require("regexp-parser-event");
exports.ParserEventEmitter = regexp_parser_event_1.ParserEventEmitter;
const regexp_range_1 = require("regexp-range");
const index_1 = require("cjk-conv/lib/zh/table/index");
exports.IOptionsZhTable = index_1.IOptions;
const mergeOptions_1 = require("./mergeOptions");
const getSource_1 = require("./getSource");
const zhTable = require("cjk-conv/lib/zh/table/index");
exports.SymDefaults = Symbol.for('zhRegExp.defaults');
function coreHandler(str, flags = null, options = {}, ...argv) {
    const opts = mergeOptions_1.getSettingOptions(str, flags, options, ...argv);
    let source;
    let hasFlags;
    ({ options, argv } = opts);
    options = mergeOptions_1.fixOptions(options);
    ({ source, hasFlags, flags } = getSource_1.default(opts));
    str = source;
    if ((!options.disableZh || !options.disableLocalRange || options.on)) {
        let ev = regexp_parser_event_1.ParserEventEmitter.create(str, flags || '');
        const zhTableFn = options.zhTable || (options.greedyTable ? conv_1.zhTableAutoGreedyTable : zhTable.auto);
        if (!options.disableZh) {
            ev.on("default" /* default */, function (ast) {
                ast.old_raw = ast.old_raw || ast.raw;
                let raw = conv_1._word_zh_core(ast.raw, options.skip, zhTableFn, options);
                if (ast.raw !== raw) {
                    ast.raw = raw;
                    ev.emit("change" /* change */, ast);
                }
            });
        }
        if (!options.disableLocalRange) {
            ev.on("class_range" /* class_range */, function (ast, ...argv) {
                let s = ast.min.raw;
                let e = ast.max.raw;
                let ret = regexp_range_1.default(s, e, {
                    createRegExpString: true,
                });
                if (ret) {
                    if (options.allowLocalRangeAutoZh) {
                        ret = conv_1._word_zh_core2(ret, options.skip, zhTableFn, options);
                    }
                    ast.old_raw = ast.old_raw || ast.raw;
                    if (ast.raw !== ret) {
                        ast.raw = ret;
                        ev.emit("change" /* change */, ast);
                    }
                }
            });
        }
        setupParserEventEmitter(ev, options);
        ev.resume();
        str = ev.getSource(!!options.debugChanged
            || !options.noUniqueClass
            || options.sortClass, options);
        flags = hasFlags ? flags : ev.flags;
    }
    return {
        source: str,
        flags: flags || '',
        options: options,
    };
}
exports.coreHandler = coreHandler;
function setupParserEventEmitter(ev, options) {
    const onList = mergeOptions_1.fixOptions(options).on;
    if (onList) {
        onList
            .forEach((conf) => {
            Object
                .keys(conf)
                .forEach(function (event) {
                ev.on(event, conf[event]);
            });
        });
    }
    return ev;
}
exports.setupParserEventEmitter = setupParserEventEmitter;
exports.default = coreHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBK0U7QUFFL0UsNkRBTTZCO0FBT0ssNkJBVGpDLHdDQUFrQixDQVNpQztBQU5wRCwrQ0FBdUM7QUFDdkMsdURBQTBFO0FBT2pFLDBCQVBZLGdCQUFlLENBT1o7QUFOeEIsaURBQStEO0FBQy9ELDJDQUFpRDtBQUNqRCx1REFBd0Q7QUFNM0MsUUFBQSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBbUUzRCxTQUFnQixXQUFXLENBQUMsR0FBRyxFQUFFLEtBQUssR0FBRyxJQUFJLEVBQUUsVUFBa0MsRUFBRSxFQUFFLEdBQUcsSUFBSTtJQUUzRixNQUFNLElBQUksR0FBRyxnQ0FBaUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBRTdELElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksUUFBaUIsQ0FBQztJQUV0QixDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBRTNCLE9BQU8sR0FBRyx5QkFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTlCLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLG1CQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFN0QsR0FBRyxHQUFHLE1BQU0sQ0FBQztJQUViLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxFQUNwRTtRQUNDLElBQUksRUFBRSxHQUFHLHdDQUFrQixDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXJELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FB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QyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7WUFDMUIsQ0FBQyxDQUFDLENBQ0Y7UUFDRixDQUFDLENBQUMsQ0FDRjtLQUNEO0lBRUQsT0FBTyxFQUFFLENBQUM7QUFDWCxDQUFDO0FBckJELDBEQXFCQztBQUVELGtCQUFlLFdBQVcsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF93b3JkX3poX2NvcmUsIF93b3JkX3poX2NvcmUyLCB6aFRhYmxlQXV0b0dyZWVkeVRhYmxlIH0gZnJvbSAnLi9jb252JztcbmltcG9ydCB7IElBc3RUb1N0cmluZ09wdGlvbnMgfSBmcm9tICdyZWdleHAtcGFyc2VyLWxpdGVyYWwnO1xuaW1wb3J0IHtcblx0SU5vZGVJbnB1dCxcblx0SVBhcnNlckV2ZW50RW1pdHRlckxpc3RlbmVyLFxuXHRJUGFyc2VyRXZlbnRFbWl0dGVyTGlzdGVuZXJNYXAsXG5cdFBhcnNlckV2ZW50RW1pdHRlcixcblx0UGFyc2VyRXZlbnRFbWl0dGVyRXZlbnQsXG59IGZyb20gJ3JlZ2V4cC1wYXJzZXItZXZlbnQnO1xuaW1wb3J0IHJlZ2V4cFJhbmdlIGZyb20gJ3JlZ2V4cC1yYW5nZSc7XG5pbXBvcnQgeyBJT3B0aW9ucyBhcyBJT3B0aW9uc1poVGFibGUgfSBmcm9tICdjamstY29udi9saWIvemgvdGFibGUvaW5kZXgnO1xuaW1wb3J0IHsgZml4T3B0aW9ucywgZ2V0U2V0dGluZ09wdGlvbnMgfSBmcm9tICcuL21lcmdlT3B0aW9ucyc7XG5pbXBvcnQgZ2V0UmVnRXhwU291cmNlUGF0dGVybiBmcm9tICcuL2dldFNvdXJjZSc7XG5pbXBvcnQgemhUYWJsZSA9IHJlcXVpcmUoJ2Nqay1jb252L2xpYi96aC90YWJsZS9pbmRleCcpO1xuXG5leHBvcnQgeyBQYXJzZXJFdmVudEVtaXR0ZXJFdmVudCwgUGFyc2VyRXZlbnRFbWl0dGVyLCBJTm9kZUlucHV0LCBJUGFyc2VyRXZlbnRFbWl0dGVyTGlzdGVuZXIsIElBc3RUb1N0cmluZ09wdGlvbnMgfVxuXG5leHBvcnQgeyBJT3B0aW9uc1poVGFibGUgfVxuXG5leHBvcnQgY29uc3QgU3ltRGVmYXVsdHMgPSBTeW1ib2wuZm9yKCd6aFJlZ0V4cC5kZWZhdWx0cycpO1xuXG5leHBvcnQgdHlwZSBJT3B0aW9uc0NvcmUgPSB7XG5cdHNraXA/OiBzdHJpbmcsXG5cdGRpc2FibGVaaD86IGJvb2xlYW4sXG5cdC8qKlxuXHQgKiBkaXNhYmxlTG9jYWxSYW5nZSBvbmx5IHdvcmsgd2hlbiBkaXNhYmxlWmggaXMgdHJ1ZVxuXHQgKi9cblx0ZGlzYWJsZUxvY2FsUmFuZ2U/OiBib29sZWFuLFxuXHRhbGxvd0xvY2FsUmFuZ2VBdXRvWmg/OiBib29sZWFuLFxuXHRmbGFncz86IHN0cmluZyxcblxuXHQvKipcblx0ICogYWxsb3cgc3RyIGlzIC9hL2dcblx0ICogQGRlcHJlY2F0ZWRcblx0ICovXG5cdHBhcnNlUmVndWxhckV4cHJlc3Npb25TdHJpbmc/OiBib29sZWFuLFxuXG5cdC8qKlxuXHQgKiDorpMg5paH5a2X5q+U5bCNIOabtOWKoOWvrOmshlxuXHQgKi9cblx0Z3JlZWR5VGFibGU/OiBib29sZWFuIHwgbnVtYmVyLFxuXHR1bnNhZmU/OiBib29sZWFuLFxuXG5cdC8qKlxuXHQgKiBhbGxvdyBzZXQgYENqa0NvbnYuemhUYWJsZS5hdXRvYFxuXHQgKi9cblx0emhUYWJsZT8oY2hhcjogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnNaaFRhYmxlKTogc3RyaW5nW11cblxufSAmIElBc3RUb1N0cmluZ09wdGlvbnM7XG5cbmV4cG9ydCB0eXBlIElPcHRpb25zPFQgZXh0ZW5kcyBJTm9kZUlucHV0ID0gSU5vZGVJbnB1dD4gPSBJT3B0aW9uc0NvcmUgJiB7XG5cdG9uPzogSU9wdGlvbnNPbjxUPiB8IElPcHRpb25zT248VD5bXSxcbn1cblxuZXhwb3J0IHR5cGUgSU9wdGlvbnNSdW50aW1lPFQgZXh0ZW5kcyBJTm9kZUlucHV0ID0gSU5vZGVJbnB1dD4gPSBJT3B0aW9uc0NvcmUgJiB7XG5cdG9uPzogSU9wdGlvbnNPbjxUPltdLFxufVxuXG5leHBvcnQgdHlwZSBJT3B0aW9uc0lucHV0PFQgZXh0ZW5kcyBJTm9kZUlucHV0ID0gSU5vZGVJbnB1dD4gPSBJT3B0aW9uczxUPiB8IElPcHRpb25zUnVudGltZTxUPlxuXG5leHBvcnQgaW50ZXJmYWNlIElDb3JlSGFuZGxlclJldHVybjxUIGV4dGVuZHMgSU5vZGVJbnB1dCA9IElOb2RlSW5wdXQ+XG57XG5cdHNvdXJjZTogc3RyaW5nLFxuXHRmbGFnczogc3RyaW5nLFxuXHRvcHRpb25zOiBJT3B0aW9uc1J1bnRpbWU8VD4sXG59XG5cbi8qXG5leHBvcnQgdHlwZSBJT3B0aW9uc09uPFQgZXh0ZW5kcyBJTm9kZUlucHV0ID0gSU5vZGVJbnB1dD4gPSB7XG5cdFtrIGluIFBhcnNlckV2ZW50RW1pdHRlckV2ZW50XT86IElQYXJzZXJFdmVudEVtaXR0ZXJMaXN0ZW5lcjxULCBQYXJzZXJFdmVudEVtaXR0ZXJFdmVudD47XG59XG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBJT3B0aW9uc09uPFQgZXh0ZW5kcyBJTm9kZUlucHV0ID0gSU5vZGVJbnB1dD4gZXh0ZW5kcyBJUGFyc2VyRXZlbnRFbWl0dGVyTGlzdGVuZXJNYXA8VD5cbntcblx0Ly9cbn1cblxuZXhwb3J0IHR5cGUgSVJlZ0V4cFVzZXJJbnB1dCA9IHN0cmluZyB8IFJlZ0V4cDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvcmVIYW5kbGVyKHN0cjogSVJlZ0V4cFVzZXJJbnB1dCxcblx0ZmxhZ3M/OiBzdHJpbmcsXG5cdG9wdGlvbnM/OiBJT3B0aW9uc0lucHV0IHwgc3RyaW5nLFxuXHQuLi5hcmd2XG4pOiBJQ29yZUhhbmRsZXJSZXR1cm5cbmV4cG9ydCBmdW5jdGlvbiBjb3JlSGFuZGxlcihzdHI6IElSZWdFeHBVc2VySW5wdXQsIG9wdGlvbnM/OiBJT3B0aW9uc0lucHV0LCAuLi5hcmd2KTogSUNvcmVIYW5kbGVyUmV0dXJuXG5leHBvcnQgZnVuY3Rpb24gY29yZUhhbmRsZXIoc3RyLCBmbGFncyA9IG51bGwsIG9wdGlvbnM6IElPcHRpb25zSW5wdXQgfCBzdHJpbmcgPSB7fSwgLi4uYXJndik6IElDb3JlSGFuZGxlclJldHVyblxue1xuXHRjb25zdCBvcHRzID0gZ2V0U2V0dGluZ09wdGlvbnMoc3RyLCBmbGFncywgb3B0aW9ucywgLi4uYXJndik7XG5cblx0bGV0IHNvdXJjZTogc3RyaW5nO1xuXHRsZXQgaGFzRmxhZ3M6IGJvb2xlYW47XG5cblx0KHsgb3B0aW9ucywgYXJndiB9ID0gb3B0cyk7XG5cblx0b3B0aW9ucyA9IGZpeE9wdGlvbnMob3B0aW9ucyk7XG5cblx0KHsgc291cmNlLCBoYXNGbGFncywgZmxhZ3MgfSA9IGdldFJlZ0V4cFNvdXJjZVBhdHRlcm4ob3B0cykpO1xuXG5cdHN0ciA9IHNvdXJjZTtcblxuXHRpZiAoKCFvcHRpb25zLmRpc2FibGVaaCB8fCAhb3B0aW9ucy5kaXNhYmxlTG9jYWxSYW5nZSB8fCBvcHRpb25zLm9uKSlcblx0e1xuXHRcdGxldCBldiA9IFBhcnNlckV2ZW50RW1pdHRlci5jcmVhdGUoc3RyLCBmbGFncyB8fCAnJyk7XG5cblx0XHRjb25zdCB6aFRhYmxlRm4gPSBvcHRpb25zLnpoVGFibGUgfHwgKG9wdGlvbnMuZ3JlZWR5VGFibGUgPyB6aFRhYmxlQXV0b0dyZWVkeVRhYmxlIDogemhUYWJsZS5hdXRvKTtcblxuXHRcdGlmICghb3B0aW9ucy5kaXNhYmxlWmgpXG5cdFx0e1xuXHRcdFx0ZXYub24oUGFyc2VyRXZlbnRFbWl0dGVyRXZlbnQuZGVmYXVsdCwgZnVuY3Rpb24gKGFzdClcblx0XHRcdHtcblx0XHRcdFx0YXN0Lm9sZF9yYXcgPSBhc3Qub2xkX3JhdyB8fCBhc3QucmF3O1xuXG5cdFx0XHRcdGxldCByYXcgPSBfd29yZF96aF9jb3JlKGFzdC5yYXcsIChvcHRpb25zIGFzIElPcHRpb25zKS5za2lwLCB6aFRhYmxlRm4sIG9wdGlvbnMgYXMgSU9wdGlvbnMpO1xuXG5cdFx0XHRcdGlmIChhc3QucmF3ICE9PSByYXcpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhc3QucmF3ID0gcmF3O1xuXHRcdFx0XHRcdGV2LmVtaXQoUGFyc2VyRXZlbnRFbWl0dGVyRXZlbnQuY2hhbmdlLCBhc3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIW9wdGlvbnMuZGlzYWJsZUxvY2FsUmFuZ2UpXG5cdFx0e1xuXHRcdFx0ZXYub24oUGFyc2VyRXZlbnRFbWl0dGVyRXZlbnQuY2xhc3NfcmFuZ2UsIGZ1bmN0aW9uIChhc3QsIC4uLmFyZ3YpXG5cdFx0XHR7XG5cdFx0XHRcdGxldCBzID0gYXN0Lm1pbi5yYXc7XG5cdFx0XHRcdGxldCBlID0gYXN0Lm1heC5yYXc7XG5cblx0XHRcdFx0bGV0IHJldCA9IHJlZ2V4cFJhbmdlKHMsIGUsIHtcblx0XHRcdFx0XHRjcmVhdGVSZWdFeHBTdHJpbmc6IHRydWUsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZiAocmV0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKChvcHRpb25zIGFzIElPcHRpb25zKS5hbGxvd0xvY2FsUmFuZ2VBdXRvWmgpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0ID0gX3dvcmRfemhfY29yZTIocmV0LCAob3B0aW9ucyBhcyBJT3B0aW9ucykuc2tpcCwgemhUYWJsZUZuLCBvcHRpb25zIGFzIElPcHRpb25zKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRhc3Qub2xkX3JhdyA9IGFzdC5vbGRfcmF3IHx8IGFzdC5yYXc7XG5cblx0XHRcdFx0XHRpZiAoYXN0LnJhdyAhPT0gcmV0KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGFzdC5yYXcgPSByZXQ7XG5cblx0XHRcdFx0XHRcdGV2LmVtaXQoUGFyc2VyRXZlbnRFbWl0dGVyRXZlbnQuY2hhbmdlLCBhc3QpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0c2V0dXBQYXJzZXJFdmVudEVtaXR0ZXIoZXYsIG9wdGlvbnMpO1xuXG5cdFx0ZXYucmVzdW1lKCk7XG5cblx0XHRzdHIgPSBldi5nZXRTb3VyY2UoISFvcHRpb25zLmRlYnVnQ2hhbmdlZFxuXHRcdFx0fHwgIW9wdGlvbnMubm9VbmlxdWVDbGFzc1xuXHRcdFx0fHwgb3B0aW9ucy5zb3J0Q2xhc3Ncblx0XHRcdCwgb3B0aW9ucyk7XG5cdFx0ZmxhZ3MgPSBoYXNGbGFncyA/IGZsYWdzIDogZXYuZmxhZ3M7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHNvdXJjZTogc3RyLFxuXHRcdGZsYWdzOiBmbGFncyB8fCAnJyxcblx0XHRvcHRpb25zOiBvcHRpb25zIGFzIElPcHRpb25zUnVudGltZSxcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBQYXJzZXJFdmVudEVtaXR0ZXIoZXY6IFBhcnNlckV2ZW50RW1pdHRlciwgb3B0aW9uczogSU9wdGlvbnNJbnB1dClcbntcblx0Y29uc3Qgb25MaXN0ID0gZml4T3B0aW9ucyhvcHRpb25zKS5vbjtcblxuXHRpZiAob25MaXN0KVxuXHR7XG5cdFx0b25MaXN0XG5cdFx0XHQuZm9yRWFjaCgoY29uZikgPT5cblx0XHRcdHtcblx0XHRcdFx0T2JqZWN0XG5cdFx0XHRcdFx0LmtleXMoY29uZilcblx0XHRcdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQ6IFBhcnNlckV2ZW50RW1pdHRlckV2ZW50KVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGV2Lm9uKGV2ZW50LCBjb25mW2V2ZW50XSlcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHQ7XG5cdFx0XHR9KVxuXHRcdDtcblx0fVxuXG5cdHJldHVybiBldjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29yZUhhbmRsZXJcblxuIl19