"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const conv_1 = require("./conv");
const regexp_parser_literal_1 = require("regexp-parser-literal");
const regexp_parser_event_1 = require("regexp-parser-event");
exports.ParserEventEmitter = regexp_parser_event_1.ParserEventEmitter;
exports.ParserEventEmitterEvent = regexp_parser_event_1.ParserEventEmitterEvent;
const regexp_range_1 = require("regexp-range");
const zhTable = require("cjk-conv/lib/zh/table/index");
function coreHandler(str, flags = null, options = {}, ...argv) {
    if (flags !== null && typeof flags == 'object') {
        options = Object.assign({}, flags);
        flags = options.flags || null;
    }
    if (typeof options == 'string') {
        options = {
            skip: options,
        };
    }
    if (typeof options.flags == 'string') {
        flags = options.flags;
    }
    let hasFlags = typeof flags == 'string';
    options = fixOptionsOn(options);
    if (1 && (!options.disableZh || !options.disableLocalRange || options.on)) {
        let ev;
        const zhTableFn = options.zhTable || (options.greedyTable ? conv_1.zhTableAutoGreedyTable : zhTable.auto);
        if (str instanceof RegExp) {
            let ast = regexp_parser_literal_1.parseRegExp(str.toString());
            // @ts-ignore
            ev = new regexp_parser_event_1.ParserEventEmitter(ast);
        }
        else {
            if (options.parseRegularExpressionString && typeof str == 'string') {
                let m = parseRegularExpressionString(str);
                if (m) {
                    str = m.source;
                    flags = hasFlags ? flags : m.flags;
                }
            }
            ev = regexp_parser_event_1.ParserEventEmitter.create(str, flags || '');
        }
        if (!options.disableZh) {
            ev.on(regexp_parser_event_1.ParserEventEmitterEvent.default, function (ast) {
                ast.old_raw = ast.old_raw || ast.raw;
                let raw = conv_1._word_zh_core(ast.raw, options.skip, zhTableFn, options);
                if (ast.raw !== raw) {
                    ast.raw = raw;
                    ev.emit(regexp_parser_event_1.ParserEventEmitterEvent.change, ast);
                }
            });
        }
        if (!options.disableLocalRange) {
            ev.on(regexp_parser_event_1.ParserEventEmitterEvent.class_range, function (ast, ...argv) {
                let s = ast.min.raw;
                let e = ast.max.raw;
                let ret = regexp_range_1.default(s, e, {
                    createRegExpString: true,
                });
                if (ret) {
                    if (options.allowLocalRangeAutoZh) {
                        ret = conv_1._word_zh_core2(ret, options.skip, zhTableFn, options);
                    }
                    ast.old_raw = ast.old_raw || ast.raw;
                    if (ast.raw !== ret) {
                        ast.raw = ret;
                        ev.emit(regexp_parser_event_1.ParserEventEmitterEvent.change, ast);
                    }
                }
            });
        }
        setupParserEventEmitter(ev, options);
        ev.resume();
        str = ev.getSource(!!options.debugChanged
            || !options.noUniqueClass
            || options.sortClass, options);
        flags = hasFlags ? flags : ev.flags;
    }
    else {
        if (options.parseRegularExpressionString && typeof str == 'string') {
            let m = parseRegularExpressionString(str);
            if (m) {
                str = new RegExp(m.source, m.flags);
                flags = hasFlags ? flags : str.flags;
            }
        }
        else if (str instanceof RegExp) {
            str = str.source;
            flags = hasFlags ? flags : str.flags;
        }
    }
    return {
        source: str,
        flags: flags || '',
        options: options,
    };
}
exports.coreHandler = coreHandler;
function parseRegularExpressionString(str) {
    let m = /^([\/#$%])(.+?)\1([a-z]*)$/.exec(str);
    if (m) {
        let [s, d, r, f] = m;
        return {
            source: typeof r !== 'undefined' ? r : '',
            flags: typeof f !== 'undefined' ? f : '',
            slash: s,
            input: str,
        };
    }
    return null;
}
exports.parseRegularExpressionString = parseRegularExpressionString;
function fixOptionsOn(options) {
    if (options.on && !Array.isArray(options.on)) {
        options.on = [options.on];
    }
    // @ts-ignore
    return options;
}
exports.fixOptionsOn = fixOptionsOn;
function setupParserEventEmitter(ev, options) {
    if (options.on) {
        fixOptionsOn(options).on
            .forEach((conf) => {
            Object
                .keys(conf)
                .forEach(function (event) {
                ev.on(event, options.on[event]);
            });
        });
    }
    return ev;
}
exports.setupParserEventEmitter = setupParserEventEmitter;
exports.default = coreHandler;
//# sourceMappingURL=data:application/json;base64,